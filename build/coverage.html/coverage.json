{"/home/travis/build/npmtest/node-npmtest-autodoc/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-autodoc/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_autodoc */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-autodoc/lib.npmtest_autodoc.js":{"path":"/home/travis/build/npmtest/node-npmtest-autodoc/lib.npmtest_autodoc.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":58}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_autodoc */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_autodoc = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_autodoc = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-autodoc/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-autodoc/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":51}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":65},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-autodoc && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_autodoc */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_autodoc","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_autodoc.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_autodoc.rollup.js'] =","            local.assetsDict['/assets.npmtest_autodoc.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_autodoc.__dirname + '/lib.npmtest_autodoc.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-autodoc/node_modules/autodoc/autodoc-node.js":{"path":"/home/travis/build/npmtest/node-npmtest-autodoc/node_modules/autodoc/autodoc-node.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":1,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":13},"end":{"line":12,"column":30}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":19},"end":{"line":17,"column":38}}},"3":{"name":"compile","line":19,"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":38}}},"4":{"name":"(anonymous_4)","line":30,"loc":{"start":{"line":30,"column":46},"end":{"line":30,"column":61}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":2,"column":33}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":54}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":52}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":54}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":66}},"7":{"start":{"line":10,"column":0},"end":{"line":49,"column":2}},"8":{"start":{"line":13,"column":6},"end":{"line":13,"column":20}},"9":{"start":{"line":19,"column":4},"end":{"line":44,"column":5}},"10":{"start":{"line":20,"column":6},"end":{"line":20,"column":49}},"11":{"start":{"line":29,"column":6},"end":{"line":29,"column":35}},"12":{"start":{"line":30,"column":6},"end":{"line":41,"column":9}},"13":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"14":{"start":{"line":32,"column":10},"end":{"line":32,"column":23}},"15":{"start":{"line":35,"column":8},"end":{"line":35,"column":33}},"16":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"17":{"start":{"line":37,"column":10},"end":{"line":37,"column":34}},"18":{"start":{"line":40,"column":8},"end":{"line":40,"column":20}},"19":{"start":{"line":43,"column":6},"end":{"line":43,"column":30}},"20":{"start":{"line":46,"column":4},"end":{"line":46,"column":32}},"21":{"start":{"line":51,"column":0},"end":{"line":51,"column":25}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":31,"column":8}},{"start":{"line":31,"column":8},"end":{"line":31,"column":8}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":12},"end":{"line":31,"column":32}},{"start":{"line":31,"column":36},"end":{"line":31,"column":52}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]}},"code":["var Autodoc = require('./autodoc'),","    Lazy    = require('lazy.js');","","Autodoc.options.codeParser      = require('esprima');","Autodoc.options.commentParser   = require('doctrine');","Autodoc.options.markdownParser  = require('marked');","Autodoc.options.templateEngine  = require('mustache');","Autodoc.options.highlighter     = require('codemirror-highlight');","","Autodoc.options.compiler = {","  'javascript': {","    compile: function(source) {","      return source;","    }","  },","","  'coffeescript': (function(compiler) {","","    function compile(source, options) {","      var js = compiler.compile(source, options);","","      // Basically we want to eliminate blank lines after block comments so that","      // Autodoc can do the whole associate-doclets-with-functions thing. I'm","      // not sure if this is the best approach, but it feels better than having","      // more logic in autodoc.js to handle varying amounts of space between","      // comments and functions for different languages. (Though there is a not-","      // super-unlikely chance that I will completely reverse my opinion on","      // this.)","      var justAfterComment = false;","      var lines = Lazy(js).split('\\n').filter(function(line) {","        if ((/^\\s*$/).test(line) && justAfterComment) {","          return false;","        }","","        justAfterComment = false;","        if ((/^\\s*\\*\\//).test(line)) {","          justAfterComment = true;","        }","","        return true;","      });","","      return lines.join('\\n');","    }","","    return { compile: compile };","","  }(require('coffee-script')))","};","","module.exports = Autodoc;",""],"l":{"1":1,"4":1,"5":1,"6":1,"7":1,"8":1,"10":1,"13":0,"19":1,"20":0,"29":0,"30":0,"31":0,"32":0,"35":0,"36":0,"37":0,"40":0,"43":0,"46":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-autodoc/node_modules/autodoc/autodoc.js":{"path":"/home/travis/build/npmtest/node-npmtest-autodoc/node_modules/autodoc/autodoc.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":1,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":1,"149":0,"150":0,"151":0,"152":0,"153":1,"154":0,"155":0,"156":0,"157":1,"158":0,"159":0,"160":0,"161":0,"162":1,"163":0,"164":0,"165":0,"166":0,"167":1,"168":0,"169":0,"170":0,"171":0,"172":1,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":1,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":1,"198":0,"199":0,"200":0,"201":0,"202":0,"203":1,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":1,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":1,"220":0,"221":0,"222":0,"223":1,"224":0,"225":1,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":1,"237":0,"238":1,"239":0,"240":0,"241":0,"242":0,"243":0,"244":1,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":1,"279":0,"280":0,"281":0,"282":0,"283":1,"284":0,"285":1,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":1,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":1,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":1,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":1,"347":0,"348":0,"349":1,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":1,"362":0,"363":0,"364":1,"365":0,"366":1,"367":0,"368":1,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":1,"381":0,"382":1,"383":0,"384":0,"385":1,"386":0,"387":0,"388":0,"389":0,"390":1,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":1,"403":0,"404":1,"405":0,"406":1,"407":0,"408":1,"409":0,"410":1,"411":0,"412":0,"413":0,"414":0,"415":1,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":1,"428":0,"429":1,"430":0,"431":0,"432":1,"433":0,"434":1,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":1,"442":0,"443":1,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":1,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":1,"471":1,"472":0},"b":{"1":[1,0],"2":[1,1],"3":[1,0],"4":[1,1],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0,0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0,0,0,0,0,0,0,0,0,0,0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0,0,0,0,0,0,0,0,0,0,0,0],"127":[1,0],"128":[1,1],"129":[1,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":1},"end":{"line":7,"column":19}}},"2":{"name":"Autodoc","line":64,"loc":{"start":{"line":64,"column":2},"end":{"line":64,"column":28}}},"3":{"name":"(anonymous_3)","line":133,"loc":{"start":{"line":133,"column":18},"end":{"line":133,"column":42}}},"4":{"name":"(anonymous_4)","line":147,"loc":{"start":{"line":147,"column":21},"end":{"line":147,"column":47}}},"5":{"name":"(anonymous_5)","line":159,"loc":{"start":{"line":159,"column":28},"end":{"line":159,"column":43}}},"6":{"name":"(anonymous_6)","line":184,"loc":{"start":{"line":184,"column":14},"end":{"line":184,"column":29}}},"7":{"name":"(anonymous_7)","line":187,"loc":{"start":{"line":187,"column":15},"end":{"line":187,"column":30}}},"8":{"name":"(anonymous_8)","line":188,"loc":{"start":{"line":188,"column":11},"end":{"line":188,"column":32}}},"9":{"name":"(anonymous_9)","line":194,"loc":{"start":{"line":194,"column":11},"end":{"line":194,"column":29}}},"10":{"name":"(anonymous_10)","line":219,"loc":{"start":{"line":219,"column":14},"end":{"line":219,"column":32}}},"11":{"name":"(anonymous_11)","line":222,"loc":{"start":{"line":222,"column":11},"end":{"line":222,"column":29}}},"12":{"name":"(anonymous_12)","line":249,"loc":{"start":{"line":249,"column":44},"end":{"line":249,"column":69}}},"13":{"name":"(anonymous_13)","line":250,"loc":{"start":{"line":250,"column":44},"end":{"line":250,"column":58}}},"14":{"name":"(anonymous_14)","line":262,"loc":{"start":{"line":262,"column":15},"end":{"line":262,"column":28}}},"15":{"name":"(anonymous_15)","line":274,"loc":{"start":{"line":274,"column":11},"end":{"line":274,"column":31}}},"16":{"name":"(anonymous_16)","line":282,"loc":{"start":{"line":282,"column":14},"end":{"line":282,"column":31}}},"17":{"name":"(anonymous_17)","line":287,"loc":{"start":{"line":287,"column":30},"end":{"line":287,"column":50}}},"18":{"name":"(anonymous_18)","line":311,"loc":{"start":{"line":311,"column":14},"end":{"line":311,"column":34}}},"19":{"name":"(anonymous_19)","line":323,"loc":{"start":{"line":323,"column":14},"end":{"line":323,"column":32}}},"20":{"name":"(anonymous_20)","line":326,"loc":{"start":{"line":326,"column":11},"end":{"line":326,"column":29}}},"21":{"name":"(anonymous_21)","line":364,"loc":{"start":{"line":364,"column":31},"end":{"line":364,"column":48}}},"22":{"name":"(anonymous_22)","line":382,"loc":{"start":{"line":382,"column":40},"end":{"line":382,"column":60}}},"23":{"name":"(anonymous_23)","line":384,"loc":{"start":{"line":384,"column":18},"end":{"line":384,"column":35}}},"24":{"name":"(anonymous_24)","line":393,"loc":{"start":{"line":393,"column":16},"end":{"line":393,"column":33}}},"25":{"name":"(anonymous_25)","line":417,"loc":{"start":{"line":417,"column":34},"end":{"line":417,"column":66}}},"26":{"name":"(anonymous_26)","line":419,"loc":{"start":{"line":419,"column":12},"end":{"line":419,"column":26}}},"27":{"name":"(anonymous_27)","line":420,"loc":{"start":{"line":420,"column":56},"end":{"line":420,"column":74}}},"28":{"name":"(anonymous_28)","line":433,"loc":{"start":{"line":433,"column":37},"end":{"line":433,"column":59}}},"29":{"name":"(anonymous_29)","line":454,"loc":{"start":{"line":454,"column":34},"end":{"line":454,"column":52}}},"30":{"name":"(anonymous_30)","line":458,"loc":{"start":{"line":458,"column":54},"end":{"line":458,"column":75}}},"31":{"name":"(anonymous_31)","line":476,"loc":{"start":{"line":476,"column":43},"end":{"line":476,"column":57}}},"32":{"name":"(anonymous_32)","line":518,"loc":{"start":{"line":518,"column":32},"end":{"line":518,"column":47}}},"33":{"name":"(anonymous_33)","line":527,"loc":{"start":{"line":527,"column":52},"end":{"line":527,"column":76}}},"34":{"name":"(anonymous_34)","line":589,"loc":{"start":{"line":589,"column":41},"end":{"line":589,"column":76}}},"35":{"name":"(anonymous_35)","line":658,"loc":{"start":{"line":658,"column":32},"end":{"line":658,"column":55}}},"36":{"name":"(anonymous_36)","line":663,"loc":{"start":{"line":663,"column":11},"end":{"line":663,"column":25}}},"37":{"name":"(anonymous_37)","line":686,"loc":{"start":{"line":686,"column":33},"end":{"line":686,"column":47}}},"38":{"name":"(anonymous_38)","line":706,"loc":{"start":{"line":706,"column":33},"end":{"line":706,"column":56}}},"39":{"name":"(anonymous_39)","line":741,"loc":{"start":{"line":741,"column":37},"end":{"line":741,"column":51}}},"40":{"name":"(anonymous_40)","line":775,"loc":{"start":{"line":775,"column":40},"end":{"line":775,"column":59}}},"41":{"name":"(anonymous_41)","line":779,"loc":{"start":{"line":779,"column":11},"end":{"line":779,"column":29}}},"42":{"name":"(anonymous_42)","line":786,"loc":{"start":{"line":786,"column":14},"end":{"line":786,"column":28}}},"43":{"name":"(anonymous_43)","line":824,"loc":{"start":{"line":824,"column":35},"end":{"line":824,"column":53}}},"44":{"name":"(anonymous_44)","line":881,"loc":{"start":{"line":881,"column":34},"end":{"line":881,"column":57}}},"45":{"name":"(anonymous_45)","line":885,"loc":{"start":{"line":885,"column":79},"end":{"line":885,"column":94}}},"46":{"name":"(anonymous_46)","line":890,"loc":{"start":{"line":890,"column":35},"end":{"line":890,"column":50}}},"47":{"name":"(anonymous_47)","line":960,"loc":{"start":{"line":960,"column":36},"end":{"line":960,"column":59}}},"48":{"name":"(anonymous_48)","line":965,"loc":{"start":{"line":965,"column":68},"end":{"line":965,"column":83}}},"49":{"name":"(anonymous_49)","line":967,"loc":{"start":{"line":967,"column":13},"end":{"line":967,"column":28}}},"50":{"name":"(anonymous_50)","line":978,"loc":{"start":{"line":978,"column":13},"end":{"line":978,"column":35}}},"51":{"name":"(anonymous_51)","line":1000,"loc":{"start":{"line":1000,"column":36},"end":{"line":1000,"column":51}}},"52":{"name":"(anonymous_52)","line":1011,"loc":{"start":{"line":1011,"column":13},"end":{"line":1011,"column":31}}},"53":{"name":"(anonymous_53)","line":1030,"loc":{"start":{"line":1030,"column":36},"end":{"line":1030,"column":55}}},"54":{"name":"(anonymous_54)","line":1035,"loc":{"start":{"line":1035,"column":17},"end":{"line":1035,"column":32}}},"55":{"name":"(anonymous_55)","line":1044,"loc":{"start":{"line":1044,"column":37},"end":{"line":1044,"column":52}}},"56":{"name":"(anonymous_56)","line":1079,"loc":{"start":{"line":1079,"column":22},"end":{"line":1079,"column":41}}},"57":{"name":"(anonymous_57)","line":1130,"loc":{"start":{"line":1130,"column":19},"end":{"line":1130,"column":42}}},"58":{"name":"(anonymous_58)","line":1141,"loc":{"start":{"line":1141,"column":25},"end":{"line":1141,"column":48}}},"59":{"name":"(anonymous_59)","line":1181,"loc":{"start":{"line":1181,"column":40},"end":{"line":1181,"column":82}}},"60":{"name":"(anonymous_60)","line":1186,"loc":{"start":{"line":1186,"column":24},"end":{"line":1186,"column":42}}},"61":{"name":"(anonymous_61)","line":1194,"loc":{"start":{"line":1194,"column":30},"end":{"line":1194,"column":48}}},"62":{"name":"(anonymous_62)","line":1270,"loc":{"start":{"line":1270,"column":20},"end":{"line":1270,"column":44}}},"63":{"name":"(anonymous_63)","line":1276,"loc":{"start":{"line":1276,"column":14},"end":{"line":1276,"column":28}}},"64":{"name":"(anonymous_64)","line":1289,"loc":{"start":{"line":1289,"column":31},"end":{"line":1289,"column":55}}},"65":{"name":"(anonymous_65)","line":1321,"loc":{"start":{"line":1321,"column":32},"end":{"line":1321,"column":47}}},"66":{"name":"(anonymous_66)","line":1331,"loc":{"start":{"line":1331,"column":42},"end":{"line":1331,"column":60}}},"67":{"name":"(anonymous_67)","line":1358,"loc":{"start":{"line":1358,"column":37},"end":{"line":1358,"column":52}}},"68":{"name":"(anonymous_68)","line":1410,"loc":{"start":{"line":1410,"column":23},"end":{"line":1410,"column":38}}},"69":{"name":"(anonymous_69)","line":1427,"loc":{"start":{"line":1427,"column":43},"end":{"line":1427,"column":59}}},"70":{"name":"(anonymous_70)","line":1483,"loc":{"start":{"line":1483,"column":32},"end":{"line":1483,"column":58}}},"71":{"name":"(anonymous_71)","line":1494,"loc":{"start":{"line":1494,"column":14},"end":{"line":1494,"column":28}}},"72":{"name":"(anonymous_72)","line":1497,"loc":{"start":{"line":1497,"column":14},"end":{"line":1497,"column":28}}},"73":{"name":"(anonymous_73)","line":1523,"loc":{"start":{"line":1523,"column":26},"end":{"line":1523,"column":43}}},"74":{"name":"(anonymous_74)","line":1548,"loc":{"start":{"line":1548,"column":33},"end":{"line":1548,"column":48}}},"75":{"name":"(anonymous_75)","line":1549,"loc":{"start":{"line":1549,"column":46},"end":{"line":1549,"column":70}}},"76":{"name":"(anonymous_76)","line":1563,"loc":{"start":{"line":1563,"column":39},"end":{"line":1563,"column":54}}},"77":{"name":"(anonymous_77)","line":1597,"loc":{"start":{"line":1597,"column":30},"end":{"line":1597,"column":51}}},"78":{"name":"(anonymous_78)","line":1619,"loc":{"start":{"line":1619,"column":27},"end":{"line":1619,"column":44}}},"79":{"name":"trim","line":1644,"loc":{"start":{"line":1644,"column":2},"end":{"line":1644,"column":24}}},"80":{"name":"splitCamelCase","line":1660,"loc":{"start":{"line":1660,"column":2},"end":{"line":1660,"column":34}}},"81":{"name":"hyphenate","line":1694,"loc":{"start":{"line":1694,"column":2},"end":{"line":1694,"column":29}}},"82":{"name":"acronym","line":1711,"loc":{"start":{"line":1711,"column":2},"end":{"line":1711,"column":27}}},"83":{"name":"(anonymous_83)","line":1713,"loc":{"start":{"line":1713,"column":6},"end":{"line":1713,"column":20}}},"84":{"name":"divide","line":1733,"loc":{"start":{"line":1733,"column":2},"end":{"line":1733,"column":35}}},"85":{"name":"unindent","line":1758,"loc":{"start":{"line":1758,"column":2},"end":{"line":1758,"column":43}}},"86":{"name":"(anonymous_86)","line":1779,"loc":{"start":{"line":1779,"column":15},"end":{"line":1779,"column":30}}},"87":{"name":"getIndentation","line":1797,"loc":{"start":{"line":1797,"column":2},"end":{"line":1797,"column":32}}},"88":{"name":"decreaseIndent","line":1815,"loc":{"start":{"line":1815,"column":2},"end":{"line":1815,"column":40}}},"89":{"name":"isBlank","line":1835,"loc":{"start":{"line":1835,"column":2},"end":{"line":1835,"column":27}}},"90":{"name":"looksLikeComment","line":1853,"loc":{"start":{"line":1853,"column":2},"end":{"line":1853,"column":36}}},"91":{"name":"firstLine","line":1869,"loc":{"start":{"line":1869,"column":2},"end":{"line":1869,"column":29}}},"92":{"name":"withLineNumbers","line":1883,"loc":{"start":{"line":1883,"column":2},"end":{"line":1883,"column":56}}},"93":{"name":"(anonymous_93)","line":1893,"loc":{"start":{"line":1893,"column":21},"end":{"line":1893,"column":39}}},"94":{"name":"removeVar","line":1918,"loc":{"start":{"line":1918,"column":2},"end":{"line":1918,"column":29}}},"95":{"name":"extractVar","line":1937,"loc":{"start":{"line":1937,"column":2},"end":{"line":1937,"column":30}}},"96":{"name":"startsWith","line":1956,"loc":{"start":{"line":1956,"column":2},"end":{"line":1956,"column":38}}},"97":{"name":"wrapParser","line":1964,"loc":{"start":{"line":1964,"column":2},"end":{"line":1964,"column":43}}},"98":{"name":"(anonymous_98)","line":1976,"loc":{"start":{"line":1976,"column":13},"end":{"line":1976,"column":24}}},"99":{"name":"insertSignatureLink","line":1986,"loc":{"start":{"line":1986,"column":2},"end":{"line":1986,"column":49}}},"100":{"name":"exampleHandlers","line":1993,"loc":{"start":{"line":1993,"column":2},"end":{"line":1993,"column":43}}},"101":{"name":"(anonymous_101)","line":1998,"loc":{"start":{"line":1998,"column":14},"end":{"line":1998,"column":30}}},"102":{"name":"(anonymous_102)","line":2008,"loc":{"start":{"line":2008,"column":14},"end":{"line":2008,"column":30}}},"103":{"name":"(anonymous_103)","line":2018,"loc":{"start":{"line":2018,"column":14},"end":{"line":2018,"column":30}}},"104":{"name":"(anonymous_104)","line":2033,"loc":{"start":{"line":2033,"column":14},"end":{"line":2033,"column":30}}},"105":{"name":"(anonymous_105)","line":2043,"loc":{"start":{"line":2043,"column":14},"end":{"line":2043,"column":30}}},"106":{"name":"(anonymous_106)","line":2053,"loc":{"start":{"line":2053,"column":14},"end":{"line":2053,"column":30}}},"107":{"name":"(anonymous_107)","line":2060,"loc":{"start":{"line":2060,"column":14},"end":{"line":2060,"column":30}}},"108":{"name":"(anonymous_108)","line":2067,"loc":{"start":{"line":2067,"column":14},"end":{"line":2067,"column":30}}},"109":{"name":"(anonymous_109)","line":2074,"loc":{"start":{"line":2074,"column":14},"end":{"line":2074,"column":30}}},"110":{"name":"(anonymous_110)","line":2081,"loc":{"start":{"line":2081,"column":14},"end":{"line":2081,"column":30}}},"111":{"name":"(anonymous_111)","line":2088,"loc":{"start":{"line":2088,"column":14},"end":{"line":2088,"column":30}}},"112":{"name":"(anonymous_112)","line":2095,"loc":{"start":{"line":2095,"column":14},"end":{"line":2095,"column":30}}},"113":{"name":"getCount","line":2111,"loc":{"start":{"line":2111,"column":2},"end":{"line":2111,"column":26}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":2157,"column":50}},"2":{"start":{"line":9,"column":2},"end":{"line":10,"column":36}},"3":{"start":{"line":13,"column":2},"end":{"line":15,"column":3}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":30}},"5":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"6":{"start":{"line":17,"column":4},"end":{"line":17,"column":37}},"7":{"start":{"line":64,"column":2},"end":{"line":89,"column":3}},"8":{"start":{"line":65,"column":4},"end":{"line":67,"column":18}},"9":{"start":{"line":69,"column":4},"end":{"line":69,"column":59}},"10":{"start":{"line":70,"column":4},"end":{"line":70,"column":62}},"11":{"start":{"line":71,"column":4},"end":{"line":71,"column":93}},"12":{"start":{"line":72,"column":4},"end":{"line":72,"column":48}},"13":{"start":{"line":73,"column":4},"end":{"line":73,"column":61}},"14":{"start":{"line":74,"column":4},"end":{"line":74,"column":60}},"15":{"start":{"line":75,"column":4},"end":{"line":75,"column":53}},"16":{"start":{"line":76,"column":4},"end":{"line":76,"column":47}},"17":{"start":{"line":77,"column":4},"end":{"line":77,"column":41}},"18":{"start":{"line":78,"column":4},"end":{"line":78,"column":54}},"19":{"start":{"line":79,"column":4},"end":{"line":79,"column":69}},"20":{"start":{"line":80,"column":4},"end":{"line":80,"column":45}},"21":{"start":{"line":81,"column":4},"end":{"line":81,"column":51}},"22":{"start":{"line":82,"column":4},"end":{"line":82,"column":53}},"23":{"start":{"line":83,"column":4},"end":{"line":83,"column":55}},"24":{"start":{"line":84,"column":4},"end":{"line":84,"column":31}},"25":{"start":{"line":86,"column":4},"end":{"line":88,"column":5}},"26":{"start":{"line":87,"column":6},"end":{"line":87,"column":47}},"27":{"start":{"line":91,"column":2},"end":{"line":91,"column":28}},"28":{"start":{"line":96,"column":2},"end":{"line":96,"column":23}},"29":{"start":{"line":133,"column":2},"end":{"line":135,"column":4}},"30":{"start":{"line":134,"column":4},"end":{"line":134,"column":44}},"31":{"start":{"line":147,"column":2},"end":{"line":149,"column":4}},"32":{"start":{"line":148,"column":4},"end":{"line":148,"column":49}},"33":{"start":{"line":159,"column":2},"end":{"line":354,"column":4}},"34":{"start":{"line":160,"column":4},"end":{"line":160,"column":23}},"35":{"start":{"line":167,"column":4},"end":{"line":167,"column":39}},"36":{"start":{"line":170,"column":4},"end":{"line":174,"column":7}},"37":{"start":{"line":178,"column":4},"end":{"line":178,"column":65}},"38":{"start":{"line":183,"column":4},"end":{"line":189,"column":18}},"39":{"start":{"line":185,"column":8},"end":{"line":185,"column":89}},"40":{"start":{"line":187,"column":32},"end":{"line":187,"column":68}},"41":{"start":{"line":188,"column":34},"end":{"line":188,"column":57}},"42":{"start":{"line":193,"column":4},"end":{"line":214,"column":17}},"43":{"start":{"line":196,"column":8},"end":{"line":196,"column":59}},"44":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"45":{"start":{"line":198,"column":10},"end":{"line":198,"column":22}},"46":{"start":{"line":203,"column":8},"end":{"line":203,"column":48}},"47":{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},"48":{"start":{"line":205,"column":10},"end":{"line":205,"column":22}},"49":{"start":{"line":209,"column":8},"end":{"line":209,"column":50}},"50":{"start":{"line":211,"column":8},"end":{"line":211,"column":106}},"51":{"start":{"line":218,"column":4},"end":{"line":235,"column":17}},"52":{"start":{"line":220,"column":8},"end":{"line":220,"column":50}},"53":{"start":{"line":223,"column":8},"end":{"line":223,"column":48}},"54":{"start":{"line":224,"column":8},"end":{"line":226,"column":9}},"55":{"start":{"line":225,"column":10},"end":{"line":225,"column":22}},"56":{"start":{"line":228,"column":8},"end":{"line":230,"column":9}},"57":{"start":{"line":229,"column":10},"end":{"line":229,"column":22}},"58":{"start":{"line":232,"column":8},"end":{"line":232,"column":43}},"59":{"start":{"line":240,"column":4},"end":{"line":244,"column":5}},"60":{"start":{"line":241,"column":6},"end":{"line":243,"column":7}},"61":{"start":{"line":242,"column":8},"end":{"line":242,"column":33}},"62":{"start":{"line":248,"column":4},"end":{"line":258,"column":5}},"63":{"start":{"line":249,"column":6},"end":{"line":257,"column":9}},"64":{"start":{"line":250,"column":8},"end":{"line":252,"column":11}},"65":{"start":{"line":251,"column":10},"end":{"line":251,"column":57}},"66":{"start":{"line":254,"column":8},"end":{"line":256,"column":9}},"67":{"start":{"line":255,"column":10},"end":{"line":255,"column":48}},"68":{"start":{"line":261,"column":4},"end":{"line":265,"column":18}},"69":{"start":{"line":263,"column":8},"end":{"line":263,"column":75}},"70":{"start":{"line":269,"column":4},"end":{"line":271,"column":5}},"71":{"start":{"line":270,"column":6},"end":{"line":270,"column":65}},"72":{"start":{"line":273,"column":4},"end":{"line":277,"column":17}},"73":{"start":{"line":275,"column":8},"end":{"line":275,"column":76}},"74":{"start":{"line":279,"column":4},"end":{"line":285,"column":17}},"75":{"start":{"line":283,"column":8},"end":{"line":283,"column":33}},"76":{"start":{"line":287,"column":4},"end":{"line":291,"column":7}},"77":{"start":{"line":288,"column":6},"end":{"line":290,"column":19}},"78":{"start":{"line":300,"column":4},"end":{"line":303,"column":15}},"79":{"start":{"line":305,"column":4},"end":{"line":305,"column":46}},"80":{"start":{"line":309,"column":4},"end":{"line":318,"column":5}},"81":{"start":{"line":310,"column":6},"end":{"line":313,"column":11}},"82":{"start":{"line":312,"column":10},"end":{"line":312,"column":46}},"83":{"start":{"line":315,"column":6},"end":{"line":317,"column":13}},"84":{"start":{"line":322,"column":4},"end":{"line":336,"column":21}},"85":{"start":{"line":324,"column":8},"end":{"line":324,"column":57}},"86":{"start":{"line":327,"column":8},"end":{"line":327,"column":48}},"87":{"start":{"line":328,"column":8},"end":{"line":330,"column":9}},"88":{"start":{"line":329,"column":10},"end":{"line":329,"column":22}},"89":{"start":{"line":332,"column":8},"end":{"line":332,"column":65}},"90":{"start":{"line":341,"column":4},"end":{"line":353,"column":6}},"91":{"start":{"line":364,"column":2},"end":{"line":408,"column":4}},"92":{"start":{"line":365,"column":4},"end":{"line":367,"column":13}},"93":{"start":{"line":371,"column":4},"end":{"line":371,"column":37}},"94":{"start":{"line":374,"column":4},"end":{"line":374,"column":47}},"95":{"start":{"line":378,"column":4},"end":{"line":378,"column":25}},"96":{"start":{"line":379,"column":4},"end":{"line":397,"column":5}},"97":{"start":{"line":380,"column":6},"end":{"line":380,"column":30}},"98":{"start":{"line":382,"column":6},"end":{"line":390,"column":9}},"99":{"start":{"line":383,"column":8},"end":{"line":387,"column":21}},"100":{"start":{"line":385,"column":12},"end":{"line":385,"column":42}},"101":{"start":{"line":389,"column":8},"end":{"line":389,"column":78}},"102":{"start":{"line":392,"column":6},"end":{"line":396,"column":19}},"103":{"start":{"line":394,"column":10},"end":{"line":394,"column":39}},"104":{"start":{"line":401,"column":4},"end":{"line":403,"column":18}},"105":{"start":{"line":407,"column":4},"end":{"line":407,"column":90}},"106":{"start":{"line":417,"column":2},"end":{"line":424,"column":4}},"107":{"start":{"line":418,"column":4},"end":{"line":423,"column":9}},"108":{"start":{"line":420,"column":8},"end":{"line":422,"column":11}},"109":{"start":{"line":421,"column":10},"end":{"line":421,"column":38}},"110":{"start":{"line":433,"column":2},"end":{"line":553,"column":4}},"111":{"start":{"line":443,"column":4},"end":{"line":443,"column":47}},"112":{"start":{"line":444,"column":4},"end":{"line":446,"column":5}},"113":{"start":{"line":445,"column":6},"end":{"line":445,"column":13}},"114":{"start":{"line":448,"column":4},"end":{"line":450,"column":43}},"115":{"start":{"line":452,"column":4},"end":{"line":452,"column":28}},"116":{"start":{"line":454,"column":4},"end":{"line":512,"column":7}},"117":{"start":{"line":458,"column":6},"end":{"line":493,"column":9}},"118":{"start":{"line":459,"column":8},"end":{"line":460,"column":17}},"119":{"start":{"line":462,"column":8},"end":{"line":492,"column":9}},"120":{"start":{"line":463,"column":10},"end":{"line":488,"column":11}},"121":{"start":{"line":464,"column":12},"end":{"line":466,"column":13}},"122":{"start":{"line":465,"column":14},"end":{"line":465,"column":71}},"123":{"start":{"line":468,"column":12},"end":{"line":468,"column":36}},"124":{"start":{"line":470,"column":12},"end":{"line":479,"column":13}},"125":{"start":{"line":471,"column":14},"end":{"line":471,"column":41}},"126":{"start":{"line":476,"column":14},"end":{"line":478,"column":17}},"127":{"start":{"line":477,"column":16},"end":{"line":477,"column":74}},"128":{"start":{"line":481,"column":12},"end":{"line":484,"column":30}},"129":{"start":{"line":487,"column":12},"end":{"line":487,"column":74}},"130":{"start":{"line":491,"column":10},"end":{"line":491,"column":22}},"131":{"start":{"line":495,"column":6},"end":{"line":511,"column":7}},"132":{"start":{"line":499,"column":8},"end":{"line":510,"column":9}},"133":{"start":{"line":500,"column":10},"end":{"line":503,"column":12}},"134":{"start":{"line":506,"column":10},"end":{"line":509,"column":13}},"135":{"start":{"line":514,"column":4},"end":{"line":552,"column":5}},"136":{"start":{"line":515,"column":6},"end":{"line":516,"column":55}},"137":{"start":{"line":518,"column":6},"end":{"line":534,"column":9}},"138":{"start":{"line":519,"column":8},"end":{"line":520,"column":31}},"139":{"start":{"line":522,"column":8},"end":{"line":522,"column":45}},"140":{"start":{"line":524,"column":8},"end":{"line":525,"column":48}},"141":{"start":{"line":527,"column":8},"end":{"line":529,"column":11}},"142":{"start":{"line":528,"column":10},"end":{"line":528,"column":71}},"143":{"start":{"line":530,"column":8},"end":{"line":530,"column":55}},"144":{"start":{"line":533,"column":8},"end":{"line":533,"column":30}},"145":{"start":{"line":536,"column":6},"end":{"line":537,"column":65}},"146":{"start":{"line":539,"column":6},"end":{"line":547,"column":20}},"147":{"start":{"line":549,"column":6},"end":{"line":551,"column":31}},"148":{"start":{"line":589,"column":2},"end":{"line":639,"column":4}},"149":{"start":{"line":590,"column":4},"end":{"line":603,"column":62}},"150":{"start":{"line":606,"column":4},"end":{"line":608,"column":5}},"151":{"start":{"line":607,"column":6},"end":{"line":607,"column":78}},"152":{"start":{"line":610,"column":4},"end":{"line":638,"column":6}},"153":{"start":{"line":658,"column":2},"end":{"line":671,"column":4}},"154":{"start":{"line":659,"column":4},"end":{"line":659,"column":20}},"155":{"start":{"line":661,"column":4},"end":{"line":670,"column":17}},"156":{"start":{"line":664,"column":8},"end":{"line":668,"column":10}},"157":{"start":{"line":686,"column":2},"end":{"line":697,"column":4}},"158":{"start":{"line":687,"column":4},"end":{"line":687,"column":67}},"159":{"start":{"line":689,"column":4},"end":{"line":691,"column":5}},"160":{"start":{"line":690,"column":6},"end":{"line":690,"column":18}},"161":{"start":{"line":693,"column":4},"end":{"line":696,"column":6}},"162":{"start":{"line":706,"column":2},"end":{"line":714,"column":4}},"163":{"start":{"line":707,"column":4},"end":{"line":707,"column":60}},"164":{"start":{"line":709,"column":4},"end":{"line":711,"column":5}},"165":{"start":{"line":710,"column":6},"end":{"line":710,"column":16}},"166":{"start":{"line":713,"column":4},"end":{"line":713,"column":47}},"167":{"start":{"line":741,"column":2},"end":{"line":759,"column":4}},"168":{"start":{"line":742,"column":4},"end":{"line":743,"column":64}},"169":{"start":{"line":744,"column":8},"end":{"line":745,"column":62}},"170":{"start":{"line":747,"column":4},"end":{"line":747,"column":30}},"171":{"start":{"line":749,"column":4},"end":{"line":758,"column":6}},"172":{"start":{"line":775,"column":2},"end":{"line":816,"column":4}},"173":{"start":{"line":776,"column":4},"end":{"line":776,"column":23}},"174":{"start":{"line":778,"column":4},"end":{"line":783,"column":17}},"175":{"start":{"line":780,"column":8},"end":{"line":780,"column":45}},"176":{"start":{"line":785,"column":4},"end":{"line":789,"column":15}},"177":{"start":{"line":787,"column":8},"end":{"line":787,"column":69}},"178":{"start":{"line":791,"column":4},"end":{"line":793,"column":25}},"179":{"start":{"line":795,"column":4},"end":{"line":810,"column":5}},"180":{"start":{"line":796,"column":6},"end":{"line":796,"column":100}},"181":{"start":{"line":798,"column":6},"end":{"line":798,"column":83}},"182":{"start":{"line":799,"column":6},"end":{"line":801,"column":7}},"183":{"start":{"line":800,"column":8},"end":{"line":800,"column":49}},"184":{"start":{"line":803,"column":11},"end":{"line":810,"column":5}},"185":{"start":{"line":804,"column":6},"end":{"line":804,"column":71}},"186":{"start":{"line":805,"column":6},"end":{"line":807,"column":7}},"187":{"start":{"line":806,"column":8},"end":{"line":806,"column":49}},"188":{"start":{"line":809,"column":6},"end":{"line":809,"column":40}},"189":{"start":{"line":812,"column":4},"end":{"line":815,"column":6}},"190":{"start":{"line":824,"column":2},"end":{"line":846,"column":4}},"191":{"start":{"line":825,"column":4},"end":{"line":825,"column":30}},"192":{"start":{"line":832,"column":4},"end":{"line":832,"column":52}},"193":{"start":{"line":834,"column":4},"end":{"line":845,"column":5}},"194":{"start":{"line":835,"column":6},"end":{"line":835,"column":82}},"195":{"start":{"line":838,"column":6},"end":{"line":842,"column":9}},"196":{"start":{"line":844,"column":6},"end":{"line":844,"column":18}},"197":{"start":{"line":881,"column":2},"end":{"line":916,"column":4}},"198":{"start":{"line":882,"column":4},"end":{"line":883,"column":29}},"199":{"start":{"line":885,"column":4},"end":{"line":915,"column":7}},"200":{"start":{"line":886,"column":6},"end":{"line":914,"column":8}},"201":{"start":{"line":897,"column":10},"end":{"line":900,"column":72}},"202":{"start":{"line":902,"column":10},"end":{"line":912,"column":12}},"203":{"start":{"line":960,"column":2},"end":{"line":995,"column":4}},"204":{"start":{"line":961,"column":4},"end":{"line":963,"column":35}},"205":{"start":{"line":965,"column":4},"end":{"line":994,"column":7}},"206":{"start":{"line":966,"column":6},"end":{"line":985,"column":19}},"207":{"start":{"line":968,"column":10},"end":{"line":968,"column":48}},"208":{"start":{"line":970,"column":10},"end":{"line":975,"column":12}},"209":{"start":{"line":979,"column":10},"end":{"line":983,"column":11}},"210":{"start":{"line":987,"column":6},"end":{"line":993,"column":8}},"211":{"start":{"line":1000,"column":2},"end":{"line":1025,"column":4}},"212":{"start":{"line":1001,"column":4},"end":{"line":1001,"column":39}},"213":{"start":{"line":1003,"column":4},"end":{"line":1024,"column":5}},"214":{"start":{"line":1004,"column":6},"end":{"line":1006,"column":13}},"215":{"start":{"line":1009,"column":6},"end":{"line":1014,"column":20}},"216":{"start":{"line":1012,"column":10},"end":{"line":1012,"column":83}},"217":{"start":{"line":1017,"column":6},"end":{"line":1021,"column":9}},"218":{"start":{"line":1023,"column":6},"end":{"line":1023,"column":41}},"219":{"start":{"line":1030,"column":2},"end":{"line":1039,"column":4}},"220":{"start":{"line":1031,"column":4},"end":{"line":1031,"column":20}},"221":{"start":{"line":1033,"column":4},"end":{"line":1038,"column":7}},"222":{"start":{"line":1036,"column":8},"end":{"line":1036,"column":40}},"223":{"start":{"line":1044,"column":2},"end":{"line":1046,"column":4}},"224":{"start":{"line":1045,"column":4},"end":{"line":1045,"column":61}},"225":{"start":{"line":1079,"column":2},"end":{"line":1120,"column":4}},"226":{"start":{"line":1080,"column":4},"end":{"line":1091,"column":63}},"227":{"start":{"line":1094,"column":4},"end":{"line":1094,"column":46}},"228":{"start":{"line":1096,"column":4},"end":{"line":1111,"column":5}},"229":{"start":{"line":1099,"column":6},"end":{"line":1110,"column":7}},"230":{"start":{"line":1100,"column":8},"end":{"line":1100,"column":23}},"231":{"start":{"line":1101,"column":8},"end":{"line":1101,"column":25}},"232":{"start":{"line":1106,"column":13},"end":{"line":1110,"column":7}},"233":{"start":{"line":1107,"column":8},"end":{"line":1107,"column":72}},"234":{"start":{"line":1108,"column":8},"end":{"line":1109,"column":20}},"235":{"start":{"line":1113,"column":4},"end":{"line":1119,"column":6}},"236":{"start":{"line":1130,"column":2},"end":{"line":1132,"column":4}},"237":{"start":{"line":1131,"column":4},"end":{"line":1131,"column":58}},"238":{"start":{"line":1141,"column":2},"end":{"line":1152,"column":4}},"239":{"start":{"line":1142,"column":4},"end":{"line":1143,"column":18}},"240":{"start":{"line":1145,"column":4},"end":{"line":1149,"column":5}},"241":{"start":{"line":1146,"column":6},"end":{"line":1146,"column":65}},"242":{"start":{"line":1148,"column":6},"end":{"line":1148,"column":90}},"243":{"start":{"line":1151,"column":4},"end":{"line":1151,"column":38}},"244":{"start":{"line":1181,"column":2},"end":{"line":1261,"column":4}},"245":{"start":{"line":1182,"column":4},"end":{"line":1184,"column":22}},"246":{"start":{"line":1186,"column":4},"end":{"line":1258,"column":7}},"247":{"start":{"line":1187,"column":6},"end":{"line":1192,"column":30}},"248":{"start":{"line":1194,"column":6},"end":{"line":1250,"column":9}},"249":{"start":{"line":1196,"column":8},"end":{"line":1200,"column":9}},"250":{"start":{"line":1197,"column":10},"end":{"line":1197,"column":43}},"251":{"start":{"line":1198,"column":10},"end":{"line":1198,"column":41}},"252":{"start":{"line":1199,"column":10},"end":{"line":1199,"column":17}},"253":{"start":{"line":1202,"column":8},"end":{"line":1202,"column":40}},"254":{"start":{"line":1204,"column":8},"end":{"line":1249,"column":9}},"255":{"start":{"line":1205,"column":10},"end":{"line":1205,"column":34}},"256":{"start":{"line":1207,"column":15},"end":{"line":1249,"column":9}},"257":{"start":{"line":1208,"column":10},"end":{"line":1208,"column":30}},"258":{"start":{"line":1213,"column":10},"end":{"line":1230,"column":11}},"259":{"start":{"line":1217,"column":12},"end":{"line":1217,"column":27}},"260":{"start":{"line":1218,"column":12},"end":{"line":1227,"column":13}},"261":{"start":{"line":1219,"column":14},"end":{"line":1221,"column":15}},"262":{"start":{"line":1220,"column":16},"end":{"line":1220,"column":22}},"263":{"start":{"line":1222,"column":14},"end":{"line":1224,"column":15}},"264":{"start":{"line":1223,"column":16},"end":{"line":1223,"column":25}},"265":{"start":{"line":1226,"column":14},"end":{"line":1226,"column":94}},"266":{"start":{"line":1229,"column":12},"end":{"line":1229,"column":45}},"267":{"start":{"line":1232,"column":10},"end":{"line":1232,"column":27}},"268":{"start":{"line":1234,"column":10},"end":{"line":1236,"column":11}},"269":{"start":{"line":1235,"column":12},"end":{"line":1235,"column":39}},"270":{"start":{"line":1237,"column":10},"end":{"line":1237,"column":29}},"271":{"start":{"line":1242,"column":10},"end":{"line":1247,"column":11}},"272":{"start":{"line":1243,"column":12},"end":{"line":1245,"column":13}},"273":{"start":{"line":1244,"column":14},"end":{"line":1244,"column":47}},"274":{"start":{"line":1246,"column":12},"end":{"line":1246,"column":39}},"275":{"start":{"line":1248,"column":10},"end":{"line":1248,"column":29}},"276":{"start":{"line":1252,"column":6},"end":{"line":1257,"column":10}},"277":{"start":{"line":1260,"column":4},"end":{"line":1260,"column":19}},"278":{"start":{"line":1270,"column":2},"end":{"line":1280,"column":4}},"279":{"start":{"line":1271,"column":4},"end":{"line":1273,"column":5}},"280":{"start":{"line":1272,"column":6},"end":{"line":1272,"column":28}},"281":{"start":{"line":1275,"column":4},"end":{"line":1279,"column":17}},"282":{"start":{"line":1277,"column":8},"end":{"line":1277,"column":50}},"283":{"start":{"line":1289,"column":2},"end":{"line":1293,"column":4}},"284":{"start":{"line":1290,"column":4},"end":{"line":1292,"column":17}},"285":{"start":{"line":1321,"column":2},"end":{"line":1342,"column":4}},"286":{"start":{"line":1322,"column":4},"end":{"line":1322,"column":42}},"287":{"start":{"line":1324,"column":4},"end":{"line":1326,"column":5}},"288":{"start":{"line":1325,"column":6},"end":{"line":1325,"column":18}},"289":{"start":{"line":1330,"column":4},"end":{"line":1336,"column":5}},"290":{"start":{"line":1331,"column":6},"end":{"line":1333,"column":22}},"291":{"start":{"line":1332,"column":8},"end":{"line":1332,"column":46}},"292":{"start":{"line":1333,"column":10},"end":{"line":1333,"column":22}},"293":{"start":{"line":1335,"column":6},"end":{"line":1335,"column":51}},"294":{"start":{"line":1338,"column":4},"end":{"line":1341,"column":6}},"295":{"start":{"line":1358,"column":2},"end":{"line":1402,"column":4}},"296":{"start":{"line":1361,"column":4},"end":{"line":1364,"column":19}},"297":{"start":{"line":1366,"column":4},"end":{"line":1393,"column":5}},"298":{"start":{"line":1367,"column":6},"end":{"line":1368,"column":14}},"299":{"start":{"line":1368,"column":8},"end":{"line":1368,"column":14}},"300":{"start":{"line":1370,"column":6},"end":{"line":1392,"column":7}},"301":{"start":{"line":1372,"column":10},"end":{"line":1373,"column":37}},"302":{"start":{"line":1373,"column":12},"end":{"line":1373,"column":37}},"303":{"start":{"line":1374,"column":10},"end":{"line":1374,"column":16}},"304":{"start":{"line":1377,"column":10},"end":{"line":1380,"column":31}},"305":{"start":{"line":1378,"column":12},"end":{"line":1378,"column":30}},"306":{"start":{"line":1379,"column":15},"end":{"line":1380,"column":31}},"307":{"start":{"line":1380,"column":12},"end":{"line":1380,"column":31}},"308":{"start":{"line":1381,"column":10},"end":{"line":1381,"column":16}},"309":{"start":{"line":1384,"column":10},"end":{"line":1387,"column":31}},"310":{"start":{"line":1385,"column":12},"end":{"line":1385,"column":30}},"311":{"start":{"line":1386,"column":15},"end":{"line":1387,"column":31}},"312":{"start":{"line":1387,"column":12},"end":{"line":1387,"column":31}},"313":{"start":{"line":1388,"column":10},"end":{"line":1388,"column":16}},"314":{"start":{"line":1391,"column":10},"end":{"line":1391,"column":25}},"315":{"start":{"line":1395,"column":4},"end":{"line":1396,"column":18}},"316":{"start":{"line":1396,"column":6},"end":{"line":1396,"column":18}},"317":{"start":{"line":1398,"column":4},"end":{"line":1401,"column":6}},"318":{"start":{"line":1410,"column":2},"end":{"line":1455,"column":4}},"319":{"start":{"line":1411,"column":4},"end":{"line":1411,"column":30}},"320":{"start":{"line":1411,"column":17},"end":{"line":1411,"column":28}},"321":{"start":{"line":1413,"column":4},"end":{"line":1454,"column":5}},"322":{"start":{"line":1415,"column":8},"end":{"line":1415,"column":25}},"323":{"start":{"line":1418,"column":8},"end":{"line":1418,"column":19}},"324":{"start":{"line":1421,"column":8},"end":{"line":1421,"column":22}},"325":{"start":{"line":1424,"column":8},"end":{"line":1424,"column":124}},"326":{"start":{"line":1427,"column":8},"end":{"line":1429,"column":22}},"327":{"start":{"line":1428,"column":10},"end":{"line":1428,"column":67}},"328":{"start":{"line":1432,"column":8},"end":{"line":1432,"column":57}},"329":{"start":{"line":1435,"column":8},"end":{"line":1435,"column":69}},"330":{"start":{"line":1438,"column":8},"end":{"line":1438,"column":59}},"331":{"start":{"line":1441,"column":8},"end":{"line":1441,"column":123}},"332":{"start":{"line":1444,"column":8},"end":{"line":1444,"column":29}},"333":{"start":{"line":1447,"column":8},"end":{"line":1447,"column":57}},"334":{"start":{"line":1450,"column":8},"end":{"line":1450,"column":57}},"335":{"start":{"line":1453,"column":8},"end":{"line":1453,"column":93}},"336":{"start":{"line":1483,"column":2},"end":{"line":1537,"column":4}},"337":{"start":{"line":1485,"column":4},"end":{"line":1488,"column":38}},"338":{"start":{"line":1493,"column":4},"end":{"line":1502,"column":17}},"339":{"start":{"line":1495,"column":8},"end":{"line":1495,"column":38}},"340":{"start":{"line":1500,"column":8},"end":{"line":1500,"column":58}},"341":{"start":{"line":1510,"column":4},"end":{"line":1513,"column":17}},"342":{"start":{"line":1516,"column":4},"end":{"line":1519,"column":17}},"343":{"start":{"line":1523,"column":4},"end":{"line":1525,"column":7}},"344":{"start":{"line":1524,"column":6},"end":{"line":1524,"column":75}},"345":{"start":{"line":1527,"column":4},"end":{"line":1536,"column":6}},"346":{"start":{"line":1548,"column":2},"end":{"line":1552,"column":4}},"347":{"start":{"line":1549,"column":4},"end":{"line":1551,"column":7}},"348":{"start":{"line":1550,"column":6},"end":{"line":1550,"column":81}},"349":{"start":{"line":1563,"column":2},"end":{"line":1587,"column":4}},"350":{"start":{"line":1564,"column":4},"end":{"line":1564,"column":25}},"351":{"start":{"line":1566,"column":4},"end":{"line":1568,"column":5}},"352":{"start":{"line":1567,"column":6},"end":{"line":1567,"column":18}},"353":{"start":{"line":1570,"column":4},"end":{"line":1572,"column":5}},"354":{"start":{"line":1571,"column":6},"end":{"line":1571,"column":18}},"355":{"start":{"line":1574,"column":4},"end":{"line":1576,"column":32}},"356":{"start":{"line":1578,"column":4},"end":{"line":1580,"column":5}},"357":{"start":{"line":1579,"column":6},"end":{"line":1579,"column":18}},"358":{"start":{"line":1582,"column":4},"end":{"line":1584,"column":5}},"359":{"start":{"line":1583,"column":6},"end":{"line":1583,"column":18}},"360":{"start":{"line":1586,"column":4},"end":{"line":1586,"column":27}},"361":{"start":{"line":1597,"column":2},"end":{"line":1600,"column":4}},"362":{"start":{"line":1598,"column":4},"end":{"line":1598,"column":71}},"363":{"start":{"line":1599,"column":4},"end":{"line":1599,"column":31}},"364":{"start":{"line":1619,"column":2},"end":{"line":1624,"column":4}},"365":{"start":{"line":1620,"column":4},"end":{"line":1623,"column":29}},"366":{"start":{"line":1644,"column":2},"end":{"line":1646,"column":3}},"367":{"start":{"line":1645,"column":4},"end":{"line":1645,"column":58}},"368":{"start":{"line":1660,"column":2},"end":{"line":1680,"column":3}},"369":{"start":{"line":1661,"column":4},"end":{"line":1664,"column":21}},"370":{"start":{"line":1666,"column":4},"end":{"line":1666,"column":28}},"371":{"start":{"line":1668,"column":4},"end":{"line":1673,"column":5}},"372":{"start":{"line":1669,"column":6},"end":{"line":1669,"column":75}},"373":{"start":{"line":1670,"column":6},"end":{"line":1670,"column":43}},"374":{"start":{"line":1670,"column":32},"end":{"line":1670,"column":41}},"375":{"start":{"line":1671,"column":6},"end":{"line":1671,"column":67}},"376":{"start":{"line":1672,"column":6},"end":{"line":1672,"column":23}},"377":{"start":{"line":1675,"column":4},"end":{"line":1677,"column":5}},"378":{"start":{"line":1676,"column":6},"end":{"line":1676,"column":60}},"379":{"start":{"line":1679,"column":4},"end":{"line":1679,"column":18}},"380":{"start":{"line":1694,"column":2},"end":{"line":1696,"column":3}},"381":{"start":{"line":1695,"column":4},"end":{"line":1695,"column":44}},"382":{"start":{"line":1711,"column":2},"end":{"line":1714,"column":3}},"383":{"start":{"line":1712,"column":4},"end":{"line":1713,"column":56}},"384":{"start":{"line":1713,"column":22},"end":{"line":1713,"column":43}},"385":{"start":{"line":1733,"column":2},"end":{"line":1740,"column":3}},"386":{"start":{"line":1734,"column":4},"end":{"line":1734,"column":39}},"387":{"start":{"line":1735,"column":4},"end":{"line":1737,"column":5}},"388":{"start":{"line":1736,"column":6},"end":{"line":1736,"column":22}},"389":{"start":{"line":1739,"column":4},"end":{"line":1739,"column":80}},"390":{"start":{"line":1758,"column":2},"end":{"line":1784,"column":3}},"391":{"start":{"line":1759,"column":4},"end":{"line":1761,"column":38}},"392":{"start":{"line":1763,"column":4},"end":{"line":1763,"column":52}},"393":{"start":{"line":1764,"column":4},"end":{"line":1773,"column":5}},"394":{"start":{"line":1765,"column":6},"end":{"line":1767,"column":7}},"395":{"start":{"line":1766,"column":8},"end":{"line":1766,"column":17}},"396":{"start":{"line":1769,"column":6},"end":{"line":1769,"column":45}},"397":{"start":{"line":1770,"column":6},"end":{"line":1772,"column":7}},"398":{"start":{"line":1771,"column":8},"end":{"line":1771,"column":42}},"399":{"start":{"line":1775,"column":4},"end":{"line":1781,"column":18}},"400":{"start":{"line":1779,"column":32},"end":{"line":1779,"column":81}},"401":{"start":{"line":1783,"column":4},"end":{"line":1783,"column":18}},"402":{"start":{"line":1797,"column":2},"end":{"line":1799,"column":3}},"403":{"start":{"line":1798,"column":4},"end":{"line":1798,"column":42}},"404":{"start":{"line":1815,"column":2},"end":{"line":1817,"column":3}},"405":{"start":{"line":1816,"column":4},"end":{"line":1816,"column":34}},"406":{"start":{"line":1835,"column":2},"end":{"line":1837,"column":3}},"407":{"start":{"line":1836,"column":4},"end":{"line":1836,"column":34}},"408":{"start":{"line":1853,"column":2},"end":{"line":1855,"column":3}},"409":{"start":{"line":1854,"column":4},"end":{"line":1854,"column":37}},"410":{"start":{"line":1869,"column":2},"end":{"line":1877,"column":3}},"411":{"start":{"line":1870,"column":4},"end":{"line":1870,"column":41}},"412":{"start":{"line":1872,"column":4},"end":{"line":1874,"column":5}},"413":{"start":{"line":1873,"column":6},"end":{"line":1873,"column":20}},"414":{"start":{"line":1876,"column":4},"end":{"line":1876,"column":53}},"415":{"start":{"line":1883,"column":2},"end":{"line":1902,"column":3}},"416":{"start":{"line":1884,"column":4},"end":{"line":1886,"column":5}},"417":{"start":{"line":1885,"column":6},"end":{"line":1885,"column":26}},"418":{"start":{"line":1888,"column":4},"end":{"line":1888,"column":21}},"419":{"start":{"line":1889,"column":4},"end":{"line":1891,"column":5}},"420":{"start":{"line":1890,"column":6},"end":{"line":1890,"column":32}},"421":{"start":{"line":1893,"column":4},"end":{"line":1901,"column":18}},"422":{"start":{"line":1894,"column":6},"end":{"line":1894,"column":40}},"423":{"start":{"line":1895,"column":6},"end":{"line":1899,"column":7}},"424":{"start":{"line":1896,"column":8},"end":{"line":1896,"column":46}},"425":{"start":{"line":1898,"column":8},"end":{"line":1898,"column":46}},"426":{"start":{"line":1900,"column":6},"end":{"line":1900,"column":18}},"427":{"start":{"line":1918,"column":2},"end":{"line":1920,"column":3}},"428":{"start":{"line":1919,"column":4},"end":{"line":1919,"column":58}},"429":{"start":{"line":1937,"column":2},"end":{"line":1940,"column":3}},"430":{"start":{"line":1938,"column":4},"end":{"line":1938,"column":58}},"431":{"start":{"line":1939,"column":4},"end":{"line":1939,"column":33}},"432":{"start":{"line":1956,"column":2},"end":{"line":1958,"column":3}},"433":{"start":{"line":1957,"column":4},"end":{"line":1957,"column":47}},"434":{"start":{"line":1964,"column":2},"end":{"line":1980,"column":3}},"435":{"start":{"line":1965,"column":4},"end":{"line":1967,"column":5}},"436":{"start":{"line":1966,"column":6},"end":{"line":1966,"column":18}},"437":{"start":{"line":1969,"column":4},"end":{"line":1969,"column":47}},"438":{"start":{"line":1971,"column":4},"end":{"line":1973,"column":19}},"439":{"start":{"line":1975,"column":4},"end":{"line":1979,"column":6}},"440":{"start":{"line":1977,"column":8},"end":{"line":1977,"column":65}},"441":{"start":{"line":1986,"column":2},"end":{"line":1988,"column":3}},"442":{"start":{"line":1987,"column":4},"end":{"line":1987,"column":109}},"443":{"start":{"line":1993,"column":2},"end":{"line":2100,"column":3}},"444":{"start":{"line":1994,"column":4},"end":{"line":2099,"column":7}},"445":{"start":{"line":1999,"column":10},"end":{"line":2002,"column":12}},"446":{"start":{"line":2009,"column":10},"end":{"line":2012,"column":12}},"447":{"start":{"line":2019,"column":10},"end":{"line":2019,"column":36}},"448":{"start":{"line":2034,"column":10},"end":{"line":2037,"column":12}},"449":{"start":{"line":2044,"column":10},"end":{"line":2047,"column":12}},"450":{"start":{"line":2054,"column":10},"end":{"line":2054,"column":39}},"451":{"start":{"line":2061,"column":10},"end":{"line":2061,"column":40}},"452":{"start":{"line":2068,"column":10},"end":{"line":2068,"column":38}},"453":{"start":{"line":2075,"column":10},"end":{"line":2075,"column":40}},"454":{"start":{"line":2082,"column":10},"end":{"line":2082,"column":36}},"455":{"start":{"line":2089,"column":10},"end":{"line":2089,"column":36}},"456":{"start":{"line":2096,"column":10},"end":{"line":2096,"column":42}},"457":{"start":{"line":2111,"column":2},"end":{"line":2148,"column":3}},"458":{"start":{"line":2112,"column":4},"end":{"line":2145,"column":5}},"459":{"start":{"line":2115,"column":8},"end":{"line":2115,"column":17}},"460":{"start":{"line":2119,"column":8},"end":{"line":2119,"column":17}},"461":{"start":{"line":2123,"column":8},"end":{"line":2123,"column":17}},"462":{"start":{"line":2126,"column":8},"end":{"line":2126,"column":17}},"463":{"start":{"line":2129,"column":8},"end":{"line":2129,"column":17}},"464":{"start":{"line":2132,"column":8},"end":{"line":2132,"column":17}},"465":{"start":{"line":2135,"column":8},"end":{"line":2135,"column":17}},"466":{"start":{"line":2138,"column":8},"end":{"line":2138,"column":17}},"467":{"start":{"line":2141,"column":8},"end":{"line":2141,"column":17}},"468":{"start":{"line":2144,"column":8},"end":{"line":2144,"column":18}},"469":{"start":{"line":2147,"column":4},"end":{"line":2147,"column":16}},"470":{"start":{"line":2150,"column":2},"end":{"line":2155,"column":3}},"471":{"start":{"line":2151,"column":4},"end":{"line":2151,"column":29}},"472":{"start":{"line":2154,"column":4},"end":{"line":2154,"column":30}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":2},"end":{"line":13,"column":2}},{"start":{"line":13,"column":2},"end":{"line":13,"column":2}}]},"2":{"line":13,"type":"binary-expr","locations":[{"start":{"line":13,"column":6},"end":{"line":13,"column":33}},{"start":{"line":13,"column":37},"end":{"line":13,"column":66}}]},"3":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]},"4":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":6},"end":{"line":16,"column":38}},{"start":{"line":16,"column":42},"end":{"line":16,"column":71}}]},"5":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":19},"end":{"line":65,"column":26}},{"start":{"line":65,"column":30},"end":{"line":65,"column":32}}]},"6":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":28},"end":{"line":73,"column":44}},{"start":{"line":73,"column":48},"end":{"line":73,"column":60}}]},"7":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":28},"end":{"line":75,"column":46}},{"start":{"line":75,"column":50},"end":{"line":75,"column":52}}]},"8":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":28},"end":{"line":76,"column":40}},{"start":{"line":76,"column":44},"end":{"line":76,"column":46}}]},"9":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":28},"end":{"line":78,"column":47}},{"start":{"line":78,"column":51},"end":{"line":78,"column":53}}]},"10":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":28},"end":{"line":83,"column":48}},{"start":{"line":83,"column":52},"end":{"line":83,"column":54}}]},"11":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"12":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":15},"end":{"line":185,"column":50}},{"start":{"line":185,"column":54},"end":{"line":185,"column":88}}]},"13":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":8},"end":{"line":197,"column":8}},{"start":{"line":197,"column":8},"end":{"line":197,"column":8}}]},"14":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":8},"end":{"line":204,"column":8}},{"start":{"line":204,"column":8},"end":{"line":204,"column":8}}]},"15":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":8},"end":{"line":224,"column":8}},{"start":{"line":224,"column":8},"end":{"line":224,"column":8}}]},"16":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":8},"end":{"line":228,"column":8}},{"start":{"line":228,"column":8},"end":{"line":228,"column":8}}]},"17":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":4},"end":{"line":240,"column":4}},{"start":{"line":240,"column":4},"end":{"line":240,"column":4}}]},"18":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":6},"end":{"line":241,"column":6}},{"start":{"line":241,"column":6},"end":{"line":241,"column":6}}]},"19":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":4},"end":{"line":248,"column":4}},{"start":{"line":248,"column":4},"end":{"line":248,"column":4}}]},"20":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":254,"column":8}},{"start":{"line":254,"column":8},"end":{"line":254,"column":8}}]},"21":{"line":263,"type":"cond-expr","locations":[{"start":{"line":263,"column":30},"end":{"line":263,"column":41}},{"start":{"line":263,"column":45},"end":{"line":263,"column":73}}]},"22":{"line":263,"type":"binary-expr","locations":[{"start":{"line":263,"column":45},"end":{"line":263,"column":57}},{"start":{"line":263,"column":61},"end":{"line":263,"column":73}}]},"23":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":4},"end":{"line":269,"column":4}},{"start":{"line":269,"column":4},"end":{"line":269,"column":4}}]},"24":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":4},"end":{"line":309,"column":4}},{"start":{"line":309,"column":4},"end":{"line":309,"column":4}}]},"25":{"line":315,"type":"cond-expr","locations":[{"start":{"line":316,"column":8},"end":{"line":316,"column":59}},{"start":{"line":317,"column":8},"end":{"line":317,"column":12}}]},"26":{"line":322,"type":"binary-expr","locations":[{"start":{"line":322,"column":25},"end":{"line":336,"column":14}},{"start":{"line":336,"column":18},"end":{"line":336,"column":20}}]},"27":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":8},"end":{"line":328,"column":8}},{"start":{"line":328,"column":8},"end":{"line":328,"column":8}}]},"28":{"line":342,"type":"binary-expr","locations":[{"start":{"line":342,"column":12},"end":{"line":342,"column":31}},{"start":{"line":342,"column":35},"end":{"line":342,"column":48}}]},"29":{"line":365,"type":"cond-expr","locations":[{"start":{"line":366,"column":6},"end":{"line":366,"column":24}},{"start":{"line":367,"column":6},"end":{"line":367,"column":12}}]},"30":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":4},"end":{"line":379,"column":4}},{"start":{"line":379,"column":4},"end":{"line":379,"column":4}}]},"31":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":4},"end":{"line":444,"column":4}},{"start":{"line":444,"column":4},"end":{"line":444,"column":4}}]},"32":{"line":462,"type":"if","locations":[{"start":{"line":462,"column":8},"end":{"line":462,"column":8}},{"start":{"line":462,"column":8},"end":{"line":462,"column":8}}]},"33":{"line":463,"type":"if","locations":[{"start":{"line":463,"column":10},"end":{"line":463,"column":10}},{"start":{"line":463,"column":10},"end":{"line":463,"column":10}}]},"34":{"line":464,"type":"if","locations":[{"start":{"line":464,"column":12},"end":{"line":464,"column":12}},{"start":{"line":464,"column":12},"end":{"line":464,"column":12}}]},"35":{"line":470,"type":"if","locations":[{"start":{"line":470,"column":12},"end":{"line":470,"column":12}},{"start":{"line":470,"column":12},"end":{"line":470,"column":12}}]},"36":{"line":481,"type":"binary-expr","locations":[{"start":{"line":481,"column":36},"end":{"line":484,"column":13}},{"start":{"line":484,"column":17},"end":{"line":484,"column":29}}]},"37":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":6},"end":{"line":495,"column":6}},{"start":{"line":495,"column":6},"end":{"line":495,"column":6}}]},"38":{"line":514,"type":"if","locations":[{"start":{"line":514,"column":4},"end":{"line":514,"column":4}},{"start":{"line":514,"column":4},"end":{"line":514,"column":4}}]},"39":{"line":590,"type":"binary-expr","locations":[{"start":{"line":590,"column":40},"end":{"line":590,"column":54}},{"start":{"line":590,"column":58},"end":{"line":590,"column":60}}]},"40":{"line":606,"type":"if","locations":[{"start":{"line":606,"column":4},"end":{"line":606,"column":4}},{"start":{"line":606,"column":4},"end":{"line":606,"column":4}}]},"41":{"line":628,"type":"binary-expr","locations":[{"start":{"line":628,"column":20},"end":{"line":628,"column":37}},{"start":{"line":628,"column":41},"end":{"line":628,"column":50}}]},"42":{"line":662,"type":"binary-expr","locations":[{"start":{"line":662,"column":22},"end":{"line":662,"column":29}},{"start":{"line":662,"column":33},"end":{"line":662,"column":40}}]},"43":{"line":667,"type":"binary-expr","locations":[{"start":{"line":667,"column":42},"end":{"line":667,"column":57}},{"start":{"line":667,"column":61},"end":{"line":667,"column":63}}]},"44":{"line":689,"type":"if","locations":[{"start":{"line":689,"column":4},"end":{"line":689,"column":4}},{"start":{"line":689,"column":4},"end":{"line":689,"column":4}}]},"45":{"line":695,"type":"binary-expr","locations":[{"start":{"line":695,"column":38},"end":{"line":695,"column":59}},{"start":{"line":695,"column":63},"end":{"line":695,"column":65}}]},"46":{"line":709,"type":"if","locations":[{"start":{"line":709,"column":4},"end":{"line":709,"column":4}},{"start":{"line":709,"column":4},"end":{"line":709,"column":4}}]},"47":{"line":709,"type":"binary-expr","locations":[{"start":{"line":709,"column":8},"end":{"line":709,"column":37}},{"start":{"line":709,"column":41},"end":{"line":709,"column":60}}]},"48":{"line":747,"type":"binary-expr","locations":[{"start":{"line":747,"column":15},"end":{"line":747,"column":23}},{"start":{"line":747,"column":27},"end":{"line":747,"column":29}}]},"49":{"line":795,"type":"if","locations":[{"start":{"line":795,"column":4},"end":{"line":795,"column":4}},{"start":{"line":795,"column":4},"end":{"line":795,"column":4}}]},"50":{"line":799,"type":"if","locations":[{"start":{"line":799,"column":6},"end":{"line":799,"column":6}},{"start":{"line":799,"column":6},"end":{"line":799,"column":6}}]},"51":{"line":803,"type":"if","locations":[{"start":{"line":803,"column":11},"end":{"line":803,"column":11}},{"start":{"line":803,"column":11},"end":{"line":803,"column":11}}]},"52":{"line":805,"type":"if","locations":[{"start":{"line":805,"column":6},"end":{"line":805,"column":6}},{"start":{"line":805,"column":6},"end":{"line":805,"column":6}}]},"53":{"line":841,"type":"binary-expr","locations":[{"start":{"line":841,"column":24},"end":{"line":841,"column":33}},{"start":{"line":841,"column":37},"end":{"line":841,"column":38}}]},"54":{"line":899,"type":"binary-expr","locations":[{"start":{"line":899,"column":26},"end":{"line":899,"column":47}},{"start":{"line":899,"column":51},"end":{"line":899,"column":59}}]},"55":{"line":974,"type":"binary-expr","locations":[{"start":{"line":974,"column":19},"end":{"line":974,"column":27}},{"start":{"line":974,"column":31},"end":{"line":974,"column":43}}]},"56":{"line":992,"type":"cond-expr","locations":[{"start":{"line":992,"column":39},"end":{"line":992,"column":58}},{"start":{"line":992,"column":61},"end":{"line":992,"column":63}}]},"57":{"line":1004,"type":"cond-expr","locations":[{"start":{"line":1005,"column":8},"end":{"line":1005,"column":60}},{"start":{"line":1006,"column":8},"end":{"line":1006,"column":12}}]},"58":{"line":1004,"type":"binary-expr","locations":[{"start":{"line":1004,"column":29},"end":{"line":1004,"column":40}},{"start":{"line":1004,"column":44},"end":{"line":1004,"column":87}}]},"59":{"line":1020,"type":"binary-expr","locations":[{"start":{"line":1020,"column":24},"end":{"line":1020,"column":33}},{"start":{"line":1020,"column":37},"end":{"line":1020,"column":38}}]},"60":{"line":1096,"type":"if","locations":[{"start":{"line":1096,"column":4},"end":{"line":1096,"column":4}},{"start":{"line":1096,"column":4},"end":{"line":1096,"column":4}}]},"61":{"line":1099,"type":"if","locations":[{"start":{"line":1099,"column":6},"end":{"line":1099,"column":6}},{"start":{"line":1099,"column":6},"end":{"line":1099,"column":6}}]},"62":{"line":1106,"type":"if","locations":[{"start":{"line":1106,"column":13},"end":{"line":1106,"column":13}},{"start":{"line":1106,"column":13},"end":{"line":1106,"column":13}}]},"63":{"line":1107,"type":"binary-expr","locations":[{"start":{"line":1107,"column":20},"end":{"line":1107,"column":65}},{"start":{"line":1107,"column":69},"end":{"line":1107,"column":71}}]},"64":{"line":1108,"type":"cond-expr","locations":[{"start":{"line":1108,"column":69},"end":{"line":1108,"column":72}},{"start":{"line":1108,"column":75},"end":{"line":1108,"column":78}}]},"65":{"line":1108,"type":"binary-expr","locations":[{"start":{"line":1108,"column":29},"end":{"line":1108,"column":31}},{"start":{"line":1108,"column":35},"end":{"line":1108,"column":65}}]},"66":{"line":1117,"type":"binary-expr","locations":[{"start":{"line":1117,"column":17},"end":{"line":1117,"column":26}},{"start":{"line":1117,"column":30},"end":{"line":1117,"column":34}}]},"67":{"line":1145,"type":"if","locations":[{"start":{"line":1145,"column":4},"end":{"line":1145,"column":4}},{"start":{"line":1145,"column":4},"end":{"line":1145,"column":4}}]},"68":{"line":1196,"type":"if","locations":[{"start":{"line":1196,"column":8},"end":{"line":1196,"column":8}},{"start":{"line":1196,"column":8},"end":{"line":1196,"column":8}}]},"69":{"line":1196,"type":"binary-expr","locations":[{"start":{"line":1196,"column":12},"end":{"line":1196,"column":31}},{"start":{"line":1196,"column":35},"end":{"line":1196,"column":46}}]},"70":{"line":1204,"type":"if","locations":[{"start":{"line":1204,"column":8},"end":{"line":1204,"column":8}},{"start":{"line":1204,"column":8},"end":{"line":1204,"column":8}}]},"71":{"line":1204,"type":"binary-expr","locations":[{"start":{"line":1204,"column":12},"end":{"line":1204,"column":17}},{"start":{"line":1204,"column":21},"end":{"line":1204,"column":39}}]},"72":{"line":1207,"type":"if","locations":[{"start":{"line":1207,"column":15},"end":{"line":1207,"column":15}},{"start":{"line":1207,"column":15},"end":{"line":1207,"column":15}}]},"73":{"line":1213,"type":"if","locations":[{"start":{"line":1213,"column":10},"end":{"line":1213,"column":10}},{"start":{"line":1213,"column":10},"end":{"line":1213,"column":10}}]},"74":{"line":1218,"type":"binary-expr","locations":[{"start":{"line":1218,"column":35},"end":{"line":1218,"column":44}},{"start":{"line":1218,"column":49},"end":{"line":1218,"column":62}},{"start":{"line":1218,"column":66},"end":{"line":1218,"column":96}}]},"75":{"line":1219,"type":"if","locations":[{"start":{"line":1219,"column":14},"end":{"line":1219,"column":14}},{"start":{"line":1219,"column":14},"end":{"line":1219,"column":14}}]},"76":{"line":1222,"type":"if","locations":[{"start":{"line":1222,"column":14},"end":{"line":1222,"column":14}},{"start":{"line":1222,"column":14},"end":{"line":1222,"column":14}}]},"77":{"line":1226,"type":"cond-expr","locations":[{"start":{"line":1226,"column":53},"end":{"line":1226,"column":71}},{"start":{"line":1226,"column":74},"end":{"line":1226,"column":92}}]},"78":{"line":1234,"type":"if","locations":[{"start":{"line":1234,"column":10},"end":{"line":1234,"column":10}},{"start":{"line":1234,"column":10},"end":{"line":1234,"column":10}}]},"79":{"line":1242,"type":"if","locations":[{"start":{"line":1242,"column":10},"end":{"line":1242,"column":10}},{"start":{"line":1242,"column":10},"end":{"line":1242,"column":10}}]},"80":{"line":1243,"type":"if","locations":[{"start":{"line":1243,"column":12},"end":{"line":1243,"column":12}},{"start":{"line":1243,"column":12},"end":{"line":1243,"column":12}}]},"81":{"line":1271,"type":"if","locations":[{"start":{"line":1271,"column":4},"end":{"line":1271,"column":4}},{"start":{"line":1271,"column":4},"end":{"line":1271,"column":4}}]},"82":{"line":1324,"type":"if","locations":[{"start":{"line":1324,"column":4},"end":{"line":1324,"column":4}},{"start":{"line":1324,"column":4},"end":{"line":1324,"column":4}}]},"83":{"line":1324,"type":"binary-expr","locations":[{"start":{"line":1324,"column":8},"end":{"line":1324,"column":14}},{"start":{"line":1324,"column":18},"end":{"line":1324,"column":27}}]},"84":{"line":1330,"type":"if","locations":[{"start":{"line":1330,"column":4},"end":{"line":1330,"column":4}},{"start":{"line":1330,"column":4},"end":{"line":1330,"column":4}}]},"85":{"line":1330,"type":"binary-expr","locations":[{"start":{"line":1330,"column":8},"end":{"line":1330,"column":17}},{"start":{"line":1330,"column":21},"end":{"line":1330,"column":45}}]},"86":{"line":1331,"type":"if","locations":[{"start":{"line":1331,"column":6},"end":{"line":1331,"column":6}},{"start":{"line":1331,"column":6},"end":{"line":1331,"column":6}}]},"87":{"line":1367,"type":"if","locations":[{"start":{"line":1367,"column":6},"end":{"line":1367,"column":6}},{"start":{"line":1367,"column":6},"end":{"line":1367,"column":6}}]},"88":{"line":1370,"type":"switch","locations":[{"start":{"line":1371,"column":8},"end":{"line":1374,"column":16}},{"start":{"line":1376,"column":8},"end":{"line":1381,"column":16}},{"start":{"line":1383,"column":8},"end":{"line":1388,"column":16}},{"start":{"line":1390,"column":8},"end":{"line":1391,"column":25}}]},"89":{"line":1372,"type":"if","locations":[{"start":{"line":1372,"column":10},"end":{"line":1372,"column":10}},{"start":{"line":1372,"column":10},"end":{"line":1372,"column":10}}]},"90":{"line":1372,"type":"binary-expr","locations":[{"start":{"line":1372,"column":14},"end":{"line":1372,"column":26}},{"start":{"line":1372,"column":31},"end":{"line":1372,"column":49}}]},"91":{"line":1377,"type":"if","locations":[{"start":{"line":1377,"column":10},"end":{"line":1377,"column":10}},{"start":{"line":1377,"column":10},"end":{"line":1377,"column":10}}]},"92":{"line":1379,"type":"if","locations":[{"start":{"line":1379,"column":15},"end":{"line":1379,"column":15}},{"start":{"line":1379,"column":15},"end":{"line":1379,"column":15}}]},"93":{"line":1379,"type":"binary-expr","locations":[{"start":{"line":1379,"column":19},"end":{"line":1379,"column":38}},{"start":{"line":1379,"column":42},"end":{"line":1379,"column":73}}]},"94":{"line":1384,"type":"if","locations":[{"start":{"line":1384,"column":10},"end":{"line":1384,"column":10}},{"start":{"line":1384,"column":10},"end":{"line":1384,"column":10}}]},"95":{"line":1386,"type":"if","locations":[{"start":{"line":1386,"column":15},"end":{"line":1386,"column":15}},{"start":{"line":1386,"column":15},"end":{"line":1386,"column":15}}]},"96":{"line":1386,"type":"binary-expr","locations":[{"start":{"line":1386,"column":19},"end":{"line":1386,"column":38}},{"start":{"line":1386,"column":42},"end":{"line":1386,"column":73}}]},"97":{"line":1395,"type":"if","locations":[{"start":{"line":1395,"column":4},"end":{"line":1395,"column":4}},{"start":{"line":1395,"column":4},"end":{"line":1395,"column":4}}]},"98":{"line":1411,"type":"if","locations":[{"start":{"line":1411,"column":4},"end":{"line":1411,"column":4}},{"start":{"line":1411,"column":4},"end":{"line":1411,"column":4}}]},"99":{"line":1413,"type":"switch","locations":[{"start":{"line":1414,"column":6},"end":{"line":1415,"column":25}},{"start":{"line":1417,"column":6},"end":{"line":1418,"column":19}},{"start":{"line":1420,"column":6},"end":{"line":1421,"column":22}},{"start":{"line":1423,"column":6},"end":{"line":1424,"column":124}},{"start":{"line":1426,"column":6},"end":{"line":1429,"column":22}},{"start":{"line":1431,"column":6},"end":{"line":1432,"column":57}},{"start":{"line":1434,"column":6},"end":{"line":1435,"column":69}},{"start":{"line":1437,"column":6},"end":{"line":1438,"column":59}},{"start":{"line":1440,"column":6},"end":{"line":1441,"column":123}},{"start":{"line":1443,"column":6},"end":{"line":1444,"column":29}},{"start":{"line":1446,"column":6},"end":{"line":1447,"column":57}},{"start":{"line":1449,"column":6},"end":{"line":1450,"column":57}},{"start":{"line":1452,"column":6},"end":{"line":1453,"column":93}}]},"100":{"line":1500,"type":"cond-expr","locations":[{"start":{"line":1500,"column":31},"end":{"line":1500,"column":34}},{"start":{"line":1500,"column":37},"end":{"line":1500,"column":40}}]},"101":{"line":1524,"type":"cond-expr","locations":[{"start":{"line":1524,"column":50},"end":{"line":1524,"column":63}},{"start":{"line":1524,"column":66},"end":{"line":1524,"column":74}}]},"102":{"line":1535,"type":"binary-expr","locations":[{"start":{"line":1535,"column":24},"end":{"line":1535,"column":49}},{"start":{"line":1535,"column":54},"end":{"line":1535,"column":93}}]},"103":{"line":1566,"type":"if","locations":[{"start":{"line":1566,"column":4},"end":{"line":1566,"column":4}},{"start":{"line":1566,"column":4},"end":{"line":1566,"column":4}}]},"104":{"line":1570,"type":"if","locations":[{"start":{"line":1570,"column":4},"end":{"line":1570,"column":4}},{"start":{"line":1570,"column":4},"end":{"line":1570,"column":4}}]},"105":{"line":1578,"type":"if","locations":[{"start":{"line":1578,"column":4},"end":{"line":1578,"column":4}},{"start":{"line":1578,"column":4},"end":{"line":1578,"column":4}}]},"106":{"line":1582,"type":"if","locations":[{"start":{"line":1582,"column":4},"end":{"line":1582,"column":4}},{"start":{"line":1582,"column":4},"end":{"line":1582,"column":4}}]},"107":{"line":1582,"type":"binary-expr","locations":[{"start":{"line":1582,"column":8},"end":{"line":1582,"column":32}},{"start":{"line":1582,"column":36},"end":{"line":1582,"column":63}}]},"108":{"line":1666,"type":"binary-expr","locations":[{"start":{"line":1666,"column":4},"end":{"line":1666,"column":10}},{"start":{"line":1666,"column":15},"end":{"line":1666,"column":26}}]},"109":{"line":1669,"type":"cond-expr","locations":[{"start":{"line":1669,"column":45},"end":{"line":1669,"column":60}},{"start":{"line":1669,"column":63},"end":{"line":1669,"column":74}}]},"110":{"line":1670,"type":"if","locations":[{"start":{"line":1670,"column":6},"end":{"line":1670,"column":6}},{"start":{"line":1670,"column":6},"end":{"line":1670,"column":6}}]},"111":{"line":1675,"type":"if","locations":[{"start":{"line":1675,"column":4},"end":{"line":1675,"column":4}},{"start":{"line":1675,"column":4},"end":{"line":1675,"column":4}}]},"112":{"line":1735,"type":"if","locations":[{"start":{"line":1735,"column":4},"end":{"line":1735,"column":4}},{"start":{"line":1735,"column":4},"end":{"line":1735,"column":4}}]},"113":{"line":1760,"type":"cond-expr","locations":[{"start":{"line":1760,"column":59},"end":{"line":1760,"column":72}},{"start":{"line":1760,"column":75},"end":{"line":1760,"column":79}}]},"114":{"line":1761,"type":"cond-expr","locations":[{"start":{"line":1761,"column":32},"end":{"line":1761,"column":33}},{"start":{"line":1761,"column":36},"end":{"line":1761,"column":37}}]},"115":{"line":1765,"type":"if","locations":[{"start":{"line":1765,"column":6},"end":{"line":1765,"column":6}},{"start":{"line":1765,"column":6},"end":{"line":1765,"column":6}}]},"116":{"line":1770,"type":"if","locations":[{"start":{"line":1770,"column":6},"end":{"line":1770,"column":6}},{"start":{"line":1770,"column":6},"end":{"line":1770,"column":6}}]},"117":{"line":1872,"type":"if","locations":[{"start":{"line":1872,"column":4},"end":{"line":1872,"column":4}},{"start":{"line":1872,"column":4},"end":{"line":1872,"column":4}}]},"118":{"line":1884,"type":"if","locations":[{"start":{"line":1884,"column":4},"end":{"line":1884,"column":4}},{"start":{"line":1884,"column":4},"end":{"line":1884,"column":4}}]},"119":{"line":1889,"type":"if","locations":[{"start":{"line":1889,"column":4},"end":{"line":1889,"column":4}},{"start":{"line":1889,"column":4},"end":{"line":1889,"column":4}}]},"120":{"line":1895,"type":"if","locations":[{"start":{"line":1895,"column":6},"end":{"line":1895,"column":6}},{"start":{"line":1895,"column":6},"end":{"line":1895,"column":6}}]},"121":{"line":1939,"type":"cond-expr","locations":[{"start":{"line":1939,"column":18},"end":{"line":1939,"column":25}},{"start":{"line":1939,"column":28},"end":{"line":1939,"column":32}}]},"122":{"line":1965,"type":"if","locations":[{"start":{"line":1965,"column":4},"end":{"line":1965,"column":4}},{"start":{"line":1965,"column":4},"end":{"line":1965,"column":4}}]},"123":{"line":1969,"type":"binary-expr","locations":[{"start":{"line":1969,"column":18},"end":{"line":1969,"column":29}},{"start":{"line":1969,"column":33},"end":{"line":1969,"column":46}}]},"124":{"line":1971,"type":"cond-expr","locations":[{"start":{"line":1972,"column":6},"end":{"line":1972,"column":12}},{"start":{"line":1973,"column":6},"end":{"line":1973,"column":18}}]},"125":{"line":1994,"type":"binary-expr","locations":[{"start":{"line":1994,"column":12},"end":{"line":1994,"column":26}},{"start":{"line":1994,"column":30},"end":{"line":1994,"column":32}}]},"126":{"line":2112,"type":"switch","locations":[{"start":{"line":2113,"column":6},"end":{"line":2113,"column":17}},{"start":{"line":2114,"column":6},"end":{"line":2115,"column":17}},{"start":{"line":2117,"column":6},"end":{"line":2117,"column":17}},{"start":{"line":2118,"column":6},"end":{"line":2119,"column":17}},{"start":{"line":2121,"column":6},"end":{"line":2121,"column":19}},{"start":{"line":2122,"column":6},"end":{"line":2123,"column":17}},{"start":{"line":2125,"column":6},"end":{"line":2126,"column":17}},{"start":{"line":2128,"column":6},"end":{"line":2129,"column":17}},{"start":{"line":2131,"column":6},"end":{"line":2132,"column":17}},{"start":{"line":2134,"column":6},"end":{"line":2135,"column":17}},{"start":{"line":2137,"column":6},"end":{"line":2138,"column":17}},{"start":{"line":2140,"column":6},"end":{"line":2141,"column":17}},{"start":{"line":2143,"column":6},"end":{"line":2144,"column":18}}]},"127":{"line":2150,"type":"if","locations":[{"start":{"line":2150,"column":2},"end":{"line":2150,"column":2}},{"start":{"line":2150,"column":2},"end":{"line":2150,"column":2}}]},"128":{"line":2150,"type":"binary-expr","locations":[{"start":{"line":2150,"column":6},"end":{"line":2150,"column":35}},{"start":{"line":2150,"column":39},"end":{"line":2150,"column":53}}]},"129":{"line":2157,"type":"cond-expr","locations":[{"start":{"line":2157,"column":34},"end":{"line":2157,"column":40}},{"start":{"line":2157,"column":43},"end":{"line":2157,"column":47}}]}},"code":["/**"," * Autodoc helps eliminate a lot of the gruntwork involved in creating a"," * JavaScript project. In particular it simplifies **writing and executing"," * tests**, **running performance benchmarks**, and **generating API"," * documentation**."," */","(function(context) {","","  var Lazy      = context.Lazy,","      Spiderman = context.Spiderman;","","  // Auto-require dependencies if they aren't already defined and we're in Node.","  if (typeof Lazy === 'undefined' && typeof require === 'function') {","    Lazy = require('lazy.js');","  }","  if (typeof Spiderman === 'undefined' && typeof require === 'function') {","    Spiderman = require('spiderman');","  }","","  /**","   * An object responsible for parsing source code into an AST.","   *","   * @typedef {Object} Parser","   * @property {function(string):*} parse","   */","","  /**","   * @typedef {Object} ExampleHandler","   * @property {RegExp} pattern","   * @property {function(Array.<string>, *):*} test","   */","","  /**","   * An object responsible for rendering HTML templates. Autodoc currently","   * assumes a decidedly Mustache-like engine. Maybe someday this will be more","   * abstract, with adapters and whatnot.","   *","   * @typedef {Object} TemplateEngine","   * @property {function(string, Object):string} render","   */","","  /**","   * All of the options Autodoc supports.","   *","   * @typedef {Object} AutodocOptions","   * @property {Parser|function(string):*} codeParser","   * @property {Parser|function(string):*} commentParser","   * @property {Parser|function(string):*} markdownParser","   * @property {Array.<string>} namespaces","   * @property {Array.<string>} tags","   * @property {string} grep","   * @property {Array.<string>} javascripts","   * @property {string} template","   * @property {TemplateEngine} templateEngine","   * @property {Object.<string, string>} templatePartials","   * @property {Array.<ExampleHandler>} exampleHandlers","   * @property {Object} extraOptions","   */","","  /**","   * @constructor","   * @param {AutodocOptions=} options","   */","  function Autodoc(options) {","    options = Lazy(options || {})","      .defaults(Autodoc.options)","      .toObject();","","    this.codeParser       = wrapParser(options.codeParser);","    this.commentParser    = wrapParser(options.commentParser);","    this.markdownParser   = wrapParser(options.markdownParser, Autodoc.processInternalLinks);","    this.highlighter      = options.highlighter;","    this.language         = options.language || 'javascript';","    this.compiler         = options.compiler[this.language];","    this.namespaces       = options.namespaces || [];","    this.tags             = options.tags || [];","    this.grep             = options.grep;","    this.javascripts      = options.javascripts || [];","    this.exampleHandlers  = exampleHandlers(options.exampleHandlers);","    this.template         = options.template;","    this.templateEngine   = options.templateEngine;","    this.templatePartials = options.templatePartials;","    this.extraOptions     = options.extraOptions || {};","    this.errors           = [];","","    if (this.highlighter) {","      this.highlighter.loadMode(this.language);","    }","  }","","  Autodoc.VERSION = '0.6.4';","","  /**","   * Default Autodoc options. (See autodoc-node.js)","   */","  Autodoc.options = {};","","  /**","   * Represents an error encountered by Autodoc.","   *","   * @public @typedef {Object} ErrorInfo","   * @property {string} stage","   * @property {string} message","   * @property {number} line","   */","","  /**","   * An object describing a library, including its namespaces and custom types","   * as well as private/internal members.","   *","   * @public @typedef {Object} LibraryInfo","   * @property {string} name","   * @property {string} referenceName","   * @property {string} description","   * @property {string} code","   * @property {Array.<NamespaceInfo>} namespaces","   * @property {boolean} hasTypes","   * @property {Array.<TypeInfo>} types","   * @property {Array.<FunctionInfo>} privateMembers","   * @property {string} exampleHelpers","   * @property {Array.<ErrorInfo>} errors","   */","","  /**","   * Creates a Autodoc instance with the specified options and uses it to","   * parse the given code.","   *","   * @public","   * @param {string} code The JavaScript code to parse.","   * @param {AutodocOptions=} options","   * @returns {LibraryInfo}","   */","  Autodoc.parse = function(code, options) {","    return new Autodoc(options).parse(code);","  };","","  /**","   * Creates a Autodoc instance with the specified options and uses it to","   * generate HTML documentation from the given code.","   *","   * @public","   * @param {LibraryInfo|string} source Either the already-parsed library data","   *     (from calling {@link #parse}), or the raw source code.","   * @param {AutodocOptions} options","   * @returns {string} The HTML for the library's API docs.","   */","  Autodoc.generate = function(source, options) {","    return new Autodoc(options).generate(source);","  };","","  /**","   * Parses an arbitrary blob of JavaScript code and returns an object","   * containing all of the data necessary to generate a project website with","   * docs, specs, and performance benchmarks.","   *","   * @param {string} code The JavaScript code to parse.","   * @returns {LibraryInfo}","   */","  Autodoc.prototype.parse = function(code) {","    var autodoc = this;","","    // Compile the input code into something codeParser can parse. (For","    // JavaScript, this should just spit the same code right back out. For","    // CoffeeScript, it will compile it to JS then do a bit of post-processing","    // on it to ensure our AST-traversal and doclet-grouping stuff all still","    // works.)","    code = this.compiler.compile(code);","","    // Generate the abstract syntax tree.","    var ast = this.codeParser.parse(code, {","      comment: true,","      loc: true,","      range: true","    });","","    // This is kind of stupid... for now, I'm just assuming the library will","    // have a @fileOverview tag and @name tag in the header comments.","    var librarySummary = autodoc.getLibrarySummary(ast.comments);","","    // Extract all of the functions from the AST, and map them to their location","    // in the code (this is so that we can associate each function with its","    // accompanying doc comments, if any).","    var functionsByLine = Lazy(Spiderman(ast).descendents())","      .filter(function(node) {","        return node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression';","      })","      .groupBy(function(node) { return node.unwrap().loc.start.line; })","      .map(function(list, line) { return [line, list[0]]; })","      .toObject();","","    // Go through all of of the comments in the AST, attempting to associate","    // each with a function.","    var functions = Lazy(ast.comments)","      .map(function(comment) {","        // Find the function right after this comment. If none exists, skip it.","        var fn = functionsByLine[comment.loc.end.line + 1];","        if (typeof fn === 'undefined') {","          return null;","        }","","        // Attempt to parse the comment. If it can't be parsed, or it appears to","        // be basically empty, then skip it.","        var doc = autodoc.parseComment(comment);","        if (!doc) {","          return null;","        }","","        // This will be useful later.","        comment.lines = comment.value.split('\\n');","","        return autodoc.createFunctionInfo(fn, doc, comment, Autodoc.getFunctionSource(fn.unwrap(), code));","      })","      .compact()","      .toArray();","","    // Also identify all of the comments that define custom types w/ the","    // `@typedef` tag.","    var typeDefs = Lazy(ast.comments)","      .filter(function(comment) {","        return (/@typedef\\b/).test(comment.value);","      })","      .map(function(comment) {","        var doc = autodoc.parseComment(comment);","        if (typeof doc === 'undefined') {","          return null;","        }","","        if (!Lazy(doc.tags).any({ title: 'typedef' })) {","          return null;","        }","","        return autodoc.createTypeInfo(doc);","      })","      .compact()","      .toArray();","","    // If no tags have been explicitly provided, but we find any occurrences of","    // the @public tag, we'll use that as a hint that only those methods tagged","    // @public should be included. Otherwise include everything.","    if (this.tags.length === 0) {","      if (Lazy(functions).any('isPublic')) {","        this.tags.push('public');","      }","    }","","    // Only include documentation for functions/types with the specified tag(s),","    // if provided.","    if (this.tags.length > 0) {","      Lazy(functions).concat(typeDefs).each(function(functionOrType) {","        var hasTag = Lazy(autodoc.tags).any(function(tag) {","          return Lazy(functionOrType.tags).contains(tag);","        });","","        if (!hasTag) {","          functionOrType.excludeFromDocs = true;","        }","      });","    }","","    // Group by namespace so that we can keep the functions organized.","    var functionsByNamespace = Lazy(functions)","      .groupBy(function(fn) {","        return fn.isPrivate ? '[private]' : (fn.namespace || fn.shortName);","      })","      .toObject();","","    // Only include specified namespaces, if the option has been provided.","    // Otherwise use all namespaces.","    if (this.namespaces.length === 0) {","      this.namespaces = Object.keys(functionsByNamespace).sort();","    }","","    var namespaces = Lazy(this.namespaces)","      .map(function(namespace) {","        return Autodoc.createNamespaceInfo(functionsByNamespace, namespace);","      })","      .toArray();","","    var privateMembers = Lazy(namespaces)","      .map('privateMembers')","      .flatten()","      .reject(function(member) {","        return !member.shortName;","      })","      .toArray();","","    Lazy(privateMembers).each(function(member, i) {","      member.methods = Lazy(functions)","        .where({ namespace: member.shortName })","        .toArray();","    });","","    // If there's a line that looks like:","    //","    //     module.exports = Foo;","    //","    // ...then we'll assume 'Foo' is the \"reference name\" of the library; i.e.,","    // the name conventionally used to refer to it within other libraries or","    // applications (like _ for Underscore, $ for jQuery, and so on).","    var nameFromModuleExports = Lazy(Spiderman(ast).descendents())","      .map(Autodoc.getModuleExportsIdentifier)","      .compact()","      .first();","","    var referenceName = nameFromModuleExports;","","    // If not, we'll guess that the first \"namespace\" that actually has members","    // is probably the conventional name.","    if (!referenceName) {","      var firstNonEmptyNamespace = Lazy(namespaces)","        .find(function(namespace) {","          return namespace.members.length > 0;","        });","","      referenceName = firstNonEmptyNamespace ?","        firstNonEmptyNamespace.namespace.split('.').shift() :","        null;","    }","","    // See if there's a comment somewhere w/ the @exampleHelpers tag; if so,","    // we'll supply that code to all examples.","    var exampleHelpers = Lazy(ast.comments)","      .filter(function(comment) {","        return (/@exampleHelpers\\b/).test(comment.value);","      })","      .map(function(comment) {","        var doc = autodoc.parseComment(comment);","        if (typeof doc === 'undefined') {","          return null;","        }","","        return Autodoc.getTagDescriptions(doc, 'exampleHelpers');","      })","      .flatten()","      .compact()","      .first() || '';","","    // TODO: Make this code a little more agnostic about the whole namespace","    // thing. I'm pretty sure there are plenty of libraries that don't use","    // this pattern at all.","    return {","      name: librarySummary.name || referenceName,","      referenceName: referenceName,","      description: librarySummary.description,","      code: code,","      namespaces: namespaces,","      docs: functions,","      privateMembers: privateMembers,","      hasTypes: !Lazy(typeDefs).all('excludeFromDocs'),","      types: typeDefs,","      exampleHelpers: exampleHelpers,","      errors: this.errors","    };","  };","","  /**","   * Generates HTML for the API docs for the given library (as raw source code)","   * using the specified options, including templating library.","   *","   * @param {LibraryInfo|string} source Either the already-parsed library data","   *     (from calling {@link #parse}), or the raw source code.","   * @returns {string} The HTML for the library's API docs.","   */","  Autodoc.prototype.generate = function(source) {","    var libraryInfo = typeof source === 'string' ?","      this.parse(source) :","      source;","","    // Decorate examples w/ custom handlers so that the template can be","    // populated differently for them.","    this.updateExamples(libraryInfo);","","    // Additional stuff we want to tack on.","    libraryInfo.javascripts = this.javascripts;","","    // If the grep option was provided, filter out all methods not matching the","    // specified pattern.","    var grep = this.grep;","    if (grep) {","      grep = new RegExp(grep);","","      Lazy(libraryInfo.namespaces).each(function(namespace) {","        namespace.allMembers = Lazy(namespace.allMembers)","          .filter(function(member) {","            return grep.test(member.name);","          })","          .toArray();","","        namespace.hasExamples = Lazy(namespace.allMembers).any('hasExamples');","      });","","      libraryInfo.docs = Lazy(libraryInfo.docs)","        .filter(function(member) {","          return grep.test(member.name)","        })","        .toArray();","    }","","    // Allow for arbitrary additional options, e.g. if the user wants to use","    // a custom template.","    var templateData = Lazy(libraryInfo)","      .extend(this.extraOptions)","      .toObject();","","    // Finally pass our awesomely-finessed data to the template engine,","    // e.g., Mustache.","    return this.templateEngine.render(this.template, templateData, this.templatePartials);","  };","","  /**","   * Iterates over all of the examples in the library and applies a callback to","   * each, along with its associated function name.","   *","   * @param {LibraryInfo} libraryInfo","   * @param {function(ExampleInfo, string):*} callback","   */","  Autodoc.prototype.eachExample = function(libraryInfo, callback) {","    Lazy(libraryInfo.docs)","      .each(function(doc) {","        Lazy(doc.examples).pluck('list').flatten().each(function(example) {","          callback(example, doc.name);","        });","      });","  };","","  /**","   * Iterates over all of the examples in the library and tests whether each","   * should be handled by a custom handler. If so, marks it as such for","   * consumption by e.g. a template or a test runner.","   *","   * @param {LibraryInfo} libraryInfo","   */","  Autodoc.prototype.updateExamples = function(libraryInfo) {","    // Allow a library to provide a config.js file, which should define an array","    // of handlers like:","    //","    // [","    //   { pattern: /regex/, test: function(match, actual) },","    //   { pattern: /regex/, test: function(match, actual) },","    //   ...","    // ]","    //","    var exampleHandlers = this.exampleHandlers;","    if (exampleHandlers.length === 0) {","      return;","    }","","    var templateEngine   = this.templateEngine,","        templatePartials = this.templatePartials,","        codeParser       = this.codeParser;","","    var brokenExamples = [];","","    this.eachExample(libraryInfo, function(example) {","      // Look at all of our examples. Those that are matched by some handler, we","      // will leave to be verified by handler.test, which will obviously need to","      // be available in the output HTML (bin/autodoc ensures this).","      var matchingHandler = Lazy(exampleHandlers).any(function(handler, i) {","        var match = example.expected.match(handler.pattern),","            data;","","        if (match) {","          if (typeof handler.template === 'string') {","            if (!(handler.template in templatePartials)) {","              throw 'Template \"' + handler.template + '\" not defined.';","            }","","            data = { match: match };","","            if (typeof handler.data === 'function') {","              data = handler.data(match);","","              // Yes, this could potentially override a property like","              // 'whateverEscaped'... I don't care about that right now. Easy to","              // fix later.","              Lazy(Object.keys(data)).each(function(key) {","                data[key + 'Escaped'] = Autodoc.escapeJsString(data[key]);","              });","            }","","            example.exampleSource = templateEngine.render(","              templatePartials[handler.template],","              Lazy(example).extend(data).toObject()","            ) || '// pending';","","          } else {","            throw 'Custom example handlers must provide a template name.';","          }","","          // Exit early -- we found our handler!","          return true;","        }","      });","","      if (!matchingHandler) {","        // In case there's no custom handler defined for this example, let's","        // ensure that it's at least valid JavaScript. If not, that's a good","        // indicator there SHOULD be a custom handler defined for it!","        try {","          codeParser.parse(","            example.statement + '\\n' +","            'var expected = ' + example.expected","          );","","        } catch (e) {","          brokenExamples.push({","            example: example,","            error: e","          });","        }","      }","    });","","    if (brokenExamples.length > 0) {","      console.error(\"\\n\\x1B[33mThe following examples don't match any custom handlers, \" +","        \"and they aren't valid JavaScript:\\x1B[39m\\n\");","","      Lazy(brokenExamples).each(function(data) {","        var example = data.example,","            error = data.error;","","        var offendingLine = error.lineNumber;","","        console.error(withLineNumbers(example.actual + '\\n' + example.expected,","          example.absoluteLine, offendingLine));","","        error = String(error).replace(/Line (\\d+)/, function(match, number) {","          return 'Line ' + (Number(number) + example.absoluteLine - 1);","        });","        console.error('\\x1B[31m' + error + '\\x1B[39m');","","        // Mark the example as broken so we don't run it.","        example.broken = true;","      });","","      console.error(\"\\nYou can define custom handlers in a 'handlers.js' file \" +","        \"(or specify with the --handlers option), like this:\\n\");","","      console.error([","        'this.exampleHandlers = [',","        '  {',","        '    pattern: /pattern to match/',","        '    template: \"name of template\"',","        '  }',","        '  ...',","        '];'","      ].join('\\n'));","","      console.error('\\nSee the README at ' +","        '\\x1B[36mhttps://github.com/dtao/autodoc/blob/master/README.md\\x1B[39m ' +","        'for more details.\\n');","    }","  };","","  /**","   * @public","   * @typedef {Object} FunctionInfo","   * @property {string} name","   * @property {string} description","   * @property {boolean} isConstructor","   * @property {boolean} isStatic","   * @property {boolean} isPublic","   * @property {boolean} isPrivate","   * @property {boolean} hasSignature","   * @property {string} signature","   * @property {string} highlightedSignature","   * @property {boolean} hasExamples","   * @property {boolean} hasBenchmarks","   * @property {Array.<ParameterInfo>} params","   * @property {Array.<ReturnInfo>} returns","   * @property {ExampleCollection} examples","   * @property {BenchmarkCollection} benchmarks","   * @property {Array.<string>} tags","   * @property {string} source","   * @property {string} highlightedSource","   */","","  /**","   * Takes a function node from the AST along with its associated doclet (from","   * parsing its comments) and generates an object with boatloads of data on it,","   * useful for passing to a templating system such as Mustache.","   *","   * @param {Object} fn","   * @param {Object} doc","   * @param {Object} comment","   * @param {string} source","   * @returns {FunctionInfo}","   */","  Autodoc.prototype.createFunctionInfo = function(fn, doc, comment, source) {","    var nameInfo    = Autodoc.parseName(fn.inferName() || '', doc),","        description = this.parseMarkdown(doc.description),","        params      = this.getParams(doc),","        returns     = this.getReturns(doc),","        aliases     = this.getAliases(doc),","        isCtor      = Autodoc.hasTag(doc, 'constructor'),","        isStatic    = nameInfo.name.indexOf('#') === -1, // That's right, hacky smacky","        isPublic    = Autodoc.hasTag(doc, 'public'),","        isGlobal    = fn.parent.type === 'Program',","        isPrivate   = Autodoc.hasTag(doc, 'private'),","        signature   = Autodoc.getSignature(nameInfo, params),","        examples    = this.getExamples(doc, comment),","        benchmarks  = this.getBenchmarks(doc, comment),","        tags        = Lazy(doc.tags).pluck('title').toArray();","","    // Do you guys know what I'm talking about? I don't. -Mitch Hedberg","    if (nameInfo.name !== nameInfo.shortName) {","      source = nameInfo.namespace + '.' + nameInfo.shortName + ' = ' + source;","    }","","    return {","      name: nameInfo.name,","      shortName: nameInfo.shortName,","      longName: nameInfo.longName,","      lowerCaseName: nameInfo.shortName.toLowerCase(),","      searchName: hyphenate(nameInfo.shortName),","      acronym: acronym(nameInfo.name),","      identifier: nameInfo.identifier,","      namespace: nameInfo.namespace,","      description: description,","      params: params,","      returns: returns,","      aliases: aliases,","      isConstructor: isCtor,","      isGlobal: isGlobal,","      isStatic: isStatic,","      isPublic: isPublic,","      isPrivate: isPrivate,","      hasSignature: params.length > 0 || !!returns,","      signature: signature,","      highlightedSignature: insertSignatureLink(this.highlightCode(signature), nameInfo.identifier),","      examples: examples,","      hasExamples: examples.length > 0,","      benchmarks: benchmarks,","      hasBenchmarks: benchmarks.length > 0,","      tags: tags,","      source: source,","      highlightedSource: this.highlightCode(source)","    };","  };","","  /**","   * @typedef {Object} ParameterInfo","   * @public","   * @property {string} name","   * @property {string} type","   * @property {string} description","   */","","  /**","   * Gets an array of { name, type, description } objects representing the","   * parameters of a function definition.","   *","   * @param {Object} doc The doclet for the function.","   * @param {string=} tagName The name of the tag to find (default: 'param').","   * @returns {Array.<ParameterInfo>} An array of { name, type, description }","   *     objects.","   */","  Autodoc.prototype.getParams = function(doc, tagName) {","    var self = this;","","    return Lazy(doc.tags)","      .where({ title: tagName || 'param' })","      .map(function(tag) {","        return {","          name: tag.name,","          type: Autodoc.formatType(tag.type),","          description: self.parseMarkdown(tag.description || '')","        };","      })","      .toArray();","  };","","  /**","   * @typedef {Object} ReturnInfo","   * @property {string} type","   * @property {string} description","   */","","  /**","   * Get a { type, description } object representing the return value of a","   * function definition.","   *","   * @param {Object} doc The doclet for the function.","   * @returns {ReturnInfo} A { type, description } object.","   */","  Autodoc.prototype.getReturns = function(doc) {","    var returnTag = Lazy(doc.tags).findWhere({ title: 'returns' });","","    if (typeof returnTag === 'undefined') {","      return null;","    }","","    return {","      type: Autodoc.formatType(returnTag.type),","      description: this.parseMarkdown(returnTag.description || '')","    };","  };","","  /**","   * Gets an array of strings providing the aliases for the function definition.","   *","   * @param {Object} doc The doclet for the function.","   * @returns {Array.<string>} An array of strings representing the function's","   *     aliases.","   */","  Autodoc.prototype.getAliases = function(doc, tagName) {","    var akaTag = Lazy(doc.tags).findWhere({ title: 'aka' });","","    if (typeof akaTag === 'undefined' || !akaTag.description) {","      return [];","    }","","    return akaTag.description.split(/\\s*,\\s*/);","  };","","  /**","   * A custom type defined by a library.","   *","   * @typedef {object} TypeInfo","   * @public","   * @property {string} name","   * @property {string} description","   * @property {Array.<PropertyInfo>} properties","   * @property {Array.<string>} tags","   */","","  /**","   * A property of a type defined by a {@link TypeInfo} object.","   *","   * @typedef {Object} PropertyInfo","   * @public","   * @property {string} name","   * @property {string} type","   * @property {string} description","   */","","  /**","   * Get a { name, properties } object representing a type defined w/ the","   * `@typedef` tag.","   */","  Autodoc.prototype.createTypeInfo = function(doc) {","    var description = doc.description,","        names       = Autodoc.getTagDescriptions(doc, 'typedef')","        properties  = this.getParams(doc, 'property'),","        tags        = Lazy(doc.tags).pluck('title').toArray();","","    var name = names[0] || '';","","    return {","      name: name,","      identifier: 'type-' + name,","      lowerCaseName: name.toLowerCase(),","      searchName: hyphenate(name),","      acronym: acronym(name),","      description: this.parseMarkdown(description),","      properties: properties,","      tags: tags","    };","  };","","  /**","   * High-level info about a library, namely its name and a brief description.","   *","   * @typedef {Object} LibrarySummary","   * @property {string} name","   * @property {string} description","   */","","  /**","   * Returns a { name, description } object describing an entire library.","   *","   * @param {Array.<string>} comments","   * @returns {LibrarySummary}","   */","  Autodoc.prototype.getLibrarySummary = function(comments) {","    var autodoc = this;","","    var docs = Lazy(comments)","      .map(function(comment) {","        return autodoc.parseComment(comment);","      })","      .compact()","      .toArray();","","    var docWithFileOverview = Lazy(docs)","      .filter(function(doc) {","        return Lazy(doc.tags).where({ title: 'fileOverview' }).any();","      })","      .first();","","    var libraryNameTag,","        libraryName = '',","        libraryDesc = '';","","    if (docWithFileOverview) {","      libraryDesc = Lazy(docWithFileOverview.tags).findWhere({ title: 'fileOverview' }).description;","","      libraryNameTag = Lazy(docWithFileOverview.tags).findWhere({ title: 'name' });","      if (libraryNameTag) {","        libraryName = libraryNameTag.description;","      }","","    } else if (docs.length > 0) {","      libraryNameTag = Lazy(docs[0].tags).findWhere({ title: 'name' });","      if (libraryNameTag) {","        libraryName = libraryNameTag.description;","      }","","      libraryDesc = docs[0].description;","    }","","    return {","      name: libraryName,","      description: this.parseMarkdown(libraryDesc)","    };","  };","","  /**","   * Parses a comment.","   *","   * @param {Object} comment The comment to parse.","   * @returns {Object?}","   */","  Autodoc.prototype.parseComment = function(comment) {","    var value = comment.value;","","    // I think I'm going crazy? For some reason I was originally wrapping","    // comments in /* and */ before parsing them with doctrine. Now it seems","    // that was never necessary and, in fact, just introduced ugliness with","    // CoffeeScript. So I'm completely reversing course, and REMOVING these","    // strings instead of introducing them. Seems to fix the issue.","    value = value.replace(/^\\s*\\/\\*|\\*\\/\\s*$/g, '');","","    try {","      return this.commentParser.parse(value, { unwrap: true, lineNumbers: true });","","    } catch (e) {","      this.errors.push({","        stage: 'parsing comment',","        line: comment.loc.start.line,","        message: String(e.message || e)","      });","","      return null;","    }","  };","","  /**","   * Represents a single code example illustrating how a function works,","   * including an expectation as well as an actual (relative) source location.","   *","   * @typedef {Object} ExampleInfo","   * @public","   * @property {number} id","   * @property {number} relativeLine","   * @property {number} absoluteLine","   * @property {string} actual","   * @property {string} actualEscaped","   * @property {string} expected","   * @property {string} expectedEscaped","   */","","  /**","   * A collection of {@link ExampleInfo} objects, with an optional block of","   * setup code and some additional properties.","   *","   * @typedef {Object} ExampleCollection","   * @public","   * @property {string} code","   * @property {string} highlightedCode","   * @property {string} setup","   * @property {Array.<ExampleInfo>} list","   */","","  /**","   * Produces a { setup, examples } object providing some examples of a function.","   *","   * @param {Object} doc","   * @returns {ExampleCollection}","   */","  Autodoc.prototype.getExamples = function(doc, comment) {","    var self = this,","        exampleIdCounter = 1;","","    return this.parseCommentLines(doc, comment.lines, ['examples', 'example'], function(data) {","      return {","        code: data.content,","        highlightedCode: self.highlightCode(data.content),","        setup: self.compileSnippet(data.preamble),","        list: Lazy(data.pairs).map(function(pair) {","          // Snip out any leading 'var x = ' before the actual expression.","          // Why? Because this is going to get injected into a template, and","          // we don't want to have 'var result = var x = '.","          //","          // To be fair, there's probably a better approach. I'll leave figuring","          // that out as an exercise to my future self.","          var actual    = pair.left,","              expected  = pair.right,","              variable  = extractVar(pair.left) || 'actual',","              statement = 'var ' + variable + ' = ' + removeVar(actual);","","          return {","            id: exampleIdCounter++,","            relativeLine: pair.lineNumber,","            absoluteLine: comment.loc.start.line + data.lineNumber + pair.lineNumber,","            actual: self.compileSnippet(actual),","            actualEscaped: Autodoc.escapeJsString(actual),","            expected: expected,","            expectedEscaped: Autodoc.escapeJsString(expected),","            variable: variable,","            statement: statement","          };","        }).toArray()","      };","    });","  };","","  /**","   * Represents a single benchmark case.","   *","   * @typedef {Object} BenchmarkCase","   * @public","   * @property {number} caseId","   * @property {string} impl","   * @property {string} name","   * @property {string} label","   */","","  /**","   * Represents a performance benchmark, which should illustrate a single piece","   * of functionality with one or more *cases* to compare different","   * implementations.","   *","   * @typedef {Object} BenchmarkInfo","   * @public","   * @property {number} id","   * @property {string} name","   * @property {Array.<BenchmarkCase>} cases","   */","","  /**","   * A collection of {@link BenchmarkInfo} objects, each of which illustrates a","   * single piece of functionality with one or more cases each.","   *","   * @typedef {Object} BenchmarkCollection","   * @public","   * @property {string} code","   * @property {string} highlightedCode","   * @property {string} setup","   * @property {Array.<BenchmarkInfo>} list","   */","","  /**","   * Produces a { setup, benchmarks } object providing some benchmarks for a function.","   *","   * @param {Object} doc","   * @param {Object} comment","   * @returns {BenchmarkCollection}","   */","  Autodoc.prototype.getBenchmarks = function(doc, comment) {","    var self = this,","        benchmarkCaseIdCounter = 1,","        benchmarkIdCounter     = 1;","","    return this.parseCommentLines(doc, comment.lines, 'benchmarks', function(data) {","      var benchmarks = Lazy(data.pairs)","        .map(function(pair) {","          var parts = divide(pair.right, ' - ');","","          return {","            caseId: benchmarkCaseIdCounter++,","            impl: self.compileSnippet(pair.left),","            name: parts[0],","            label: parts[1] || 'Ops/second'","          };","        })","        .groupBy('name')","        .map(function(cases, name) {","          return {","            id: benchmarkIdCounter++,","            name: name,","            cases: cases","          }","        })","        .toArray();","","      return {","        code: data.content,","        highlightedCode: self.highlightCode(data.content),","        setup: self.compileSnippet(data.preamble),","        list: benchmarks,","        cases: benchmarks.length > 0 ? benchmarks[0].cases : []","      };","    });","  };","","  /**","   * Does syntax highlighting on a bit of code.","   */","  Autodoc.prototype.highlightCode = function(code) {","    var highlighter = this.highlighter;","","    try {","      var highlightedCode = (highlighter && typeof highlighter.highlight === 'function') ?","        highlighter.highlight(code, { mode: this.language }) :","        code;","","      // Wrap each line in a <span> including the line number.","      return Lazy(highlightedCode)","        .split('\\n')","        .map(function(line, i) {","          return '<span class=\"line\" data-line-no=\"' + i + '\">' + line + '</span>';","        })","        .join('\\n');","","    } catch (e) {","      this.errors.push({","        stage: 'syntax highlighting',","        line: '',","        message: String(e.message || e)","      });","","      return '<code>' + code + '</code>';","    }","  };","","  /**","   * Parses Markdown + does syntax highlighting (maybe).","   */","  Autodoc.prototype.parseMarkdown = function(markdown) {","    var self = this;","","    return this.markdownParser.parse(markdown, {","      gfm: true,","      highlight: function(code) {","        return self.highlightCode(code);","      }","    });","  };","","  /**","   * Compiles just a little snippet of code.","   */","  Autodoc.prototype.compileSnippet = function(code) {","    return trim(this.compiler.compile(code, { bare: true }));","  };","","  /**","   * Contains various representations (e.g., short, full) of the *name* of a","   * function.","   *","   * @typedef {Object} NameInfo","   * @property {string} name","   * @property {string} shortName","   * @property {string} longName","   * @property {string} namespace","   * @property {string} identifier","   */","","  /**","   * Takes, e.g., 'Foo#bar' and returns a { name, shortName, namespace,","   * identifier} object.","   *","   * @public","   * @param {string} name","   * @param {FunctionInfo=} doc","   * @returns {NameInfo}","   *","   * @examples","   * Autodoc.parseName('Foo.prototype.bar').name           // => 'Foo#bar'","   * Autodoc.parseName('Foo.prototype.bar').shortName      // => 'bar'","   * Autodoc.parseName('Foo.Bar.prototype.baz').namespace  // => 'Foo.Bar'","   * Autodoc.parseName('Foo.prototype.bar').identifier     // => 'Foo-bar'","   * Autodoc.parseName('Foo.Bar.prototype.baz').identifier // => 'Foo-Bar-baz'","   * Autodoc.parseName('Foo').name                         // => 'Foo'","   * Autodoc.parseName('Foo').identifier                   // => 'Foo'","   * Autodoc.parseName('Foo').namespace                    // => null","   */","  Autodoc.parseName = function(name, fn) {","    var parts = name.split('.'),","","        // e.g., the short name for 'Lib.utils.func' should be 'func'","        shortName = parts.pop(),","","        // keep the long name too, for e.g. regurgitating it back in a template","        // (this is what we do w/ elevating private members)","        longName = name,","","        // we'll say Foo.bar and Foo.prototype.bar both belong to the 'Foo'","        // namespace","        namespace = Lazy(parts).without('prototype').join('.');","","    // As a convention we'll reformat 'Class.prototype.method' as 'Class#method'","    name = name.replace(/\\.prototype\\./, '#');","","    if (fn) {","      // Actually, if this function is tagged @global, then it doesn't belong to","      // a namespace.","      if (Autodoc.hasTag(fn, 'global')) {","        namespace = '';","        name = shortName;","","      // On the other hand, if it's tagged @memberOf, then we want to use that","      // tag for its explicit namespace. (We'll assume static members unless the","      // @instance tag is present.)","      } else if (Autodoc.hasTag(fn, 'memberOf')) {","        namespace = Autodoc.getTagDescriptions(fn, 'memberOf')[0] || '';","        name = namespace + ((fn && Autodoc.hasTag(fn, 'instance')) ? '#' : '.') +","          shortName;","      }","    }","","    return {","      name: name,","      shortName: shortName,","      longName: longName,","      namespace: namespace || null,","      identifier: name.replace(/[\\.#]/g, '-')","    };","  };","","  /**","   * Simply determines whether a doc has a tag or doesn't.","   *","   * @public","   * @param {Object} doc The doclet to check.","   * @param {string} tagName The tag name to look for.","   * @returns {boolean} Whether or not the doclet has the tag.","   */","  Autodoc.hasTag = function(doc, tagName) {","    return !!Lazy(doc.tags).findWhere({ title: tagName });","  };","","  /**","   * Produces a string representing the signature of a function.","   *","   * @param {NameInfo} name","   * @param {Array.<ParameterInfo>} params","   * @returns {string}","   */","  Autodoc.getSignature = function(name, params) {","    var formattedParams = '(' + Lazy(params).pluck('name').join(', ') + ')',","        signature;","","    if (name.name === name.shortName) {","      signature = 'function ' + name.shortName + formattedParams;","    } else {","      signature = name.namespace + '.' + name.shortName + ' = function' + formattedParams;","    }","","    return signature + ' { /*...*/ }';","  };","","  /**","   * Represents an abstract left/right pair, which can be used e.g. as the basis","   * for an {@link ExampleInfo}.","   *","   * @typedef {Object} PairInfo","   * @property {number} lineNumber","   * @property {string} left","   * @property {string} right","   */","","  /**","   * @callback DataCallback","   * @param {{preamble:string, pairs:Array.<PairInfo>}} data","   * @returns {*}","   */","","  /**","   * Takes a doclet and a tag name (or list of tag names), then reads all of the","   * lines from that tag and splits them across '=>', finally calling a callback","   * on each left/right pair. (Does that make any sense? Whatever.)","   *","   * @param {Object} doc","   * @param {string[]} source","   * @param {string|string[]} tagNames","   * @param {DataCallback} callback","   * @returns {Array.<*>} An array of whatever the callback returns.","   */","  Autodoc.prototype.parseCommentLines = function(doc, source, tagNames, callback) {","    var self     = this,","        comments = Autodoc.getTags(doc, tagNames),","        results  = [];","","    Lazy(comments).each(function(comment) {","      var baseLine     = comment.lineNumber,","          commentLines = comment.description.split('\\n'),","          initialLines = [],","          pairs        = [],","          currentPair  = null,","          previousPair = null;","","      Lazy(commentLines).each(function(line, i) {","        // Allow multiline expectations as long as subsequent lines are indented","        if ((/^\\s+/).test(line) && currentPair) {","          currentPair.right += '\\n' + line;","          currentPair.isMultiline = true;","          return;","        }","","        var pair = self.parsePair(line);","","        if (!pair && pairs.length === 0) {","          initialLines.push(line);","","        } else if (pair) {","          pair.lineNumber = i;","","          // Join pairs that actually take up two lines, like:","          // actual();","          // => expectation","          if (!pair.left) {","            // Allow actual value to be a multiline expression. As long as we","            // don't swallow up any previous assertions, we'll walk backwards","            // until encountering a blank line.","            pair.left = [];","            for (var line = i - 1; line >= 0 && (!previousPair || line > previousPair.lineNumber); --line) {","              if (isBlank(commentLines[line])) {","                break;","              }","              if (looksLikeComment(commentLines[line])) {","                continue;","              }","","              pair.left.unshift(pairs.length === 0 ? initialLines.pop() : commentLines[line]);","            }","","            pair.left = pair.left.join('\\n');","          }","","          pairs.push(pair);","","          if (currentPair) {","            previousPair = currentPair;","          }","          currentPair = pair;","","        } else {","          // Allow one final unindented line at the end of a multiline","          // expectation.","          if (currentPair) {","            if (currentPair.isMultiline) {","              currentPair.right += '\\n' + line;","            }","            previousPair = currentPair;","          }","          currentPair = null;","        }","      });","","      results.push(callback({","        content: comment.description,","        preamble: initialLines.join('\\n'),","        lineNumber: baseLine,","        pairs: pairs","      }));","    });","","    return results;","  };","","  /**","   * Gets the tags with the specified tag name(s).","   *","   * @param {Object} doc","   * @param {string|string[]} tagNames","   * @returns {Array.<Object>}","   */","  Autodoc.getTags = function(doc, tagNames) {","    if (!(tagNames instanceof Array)) {","      tagNames = [tagNames];","    }","","    return Lazy(doc.tags)","      .filter(function(tag) {","        return Lazy(tagNames).contains(tag.title);","      })","      .toArray();","  };","","  /**","   * Gets the text descriptions from comment tags with the specified tag name(s).","   *","   * @param {Object} doc","   * @param {string|string[]} tagNames","   * @returns {Array.<string>}","   */","  Autodoc.getTagDescriptions = function(doc, tagNames) {","    return Lazy(Autodoc.getTags(doc, tagNames))","      .pluck('description')","      .toArray();","  };","","  /**","   * Given a line like 'left // => right', parses this into a { left, right }","   * pair. Trims leading and trailing whitespace around both parts. The '=>'","   * part is optional.","   *","   * @public","   * @param {string} line","   * @returns {PairInfo|null}","   *","   * @examples","   * var autodoc = new Autodoc({","   *   exampleHandlers: [","   *     { pattern: /^custom pattern$/ }","   *   ]","   * });","   *","   * autodoc.parsePair('foo(bar)//=>5')      // => { left: 'foo(bar)', right: '5' }","   * autodoc.parsePair(' bar(baz) //=> 10 ') // => { left: 'bar(baz)', right: '10' }","   * autodoc.parsePair('foo // => bar')      // => { left: 'foo', right: 'bar' }","   * autodoc.parsePair('foo // bar')         // => { left: 'foo', right: 'bar' }","   * autodoc.parsePair('// => 5')            // => { left: '', right: '5' }","   * autodoc.parsePair('// bar')             // => null","   * autodoc.parsePair('// custom pattern')  // => { left: '', right: 'custom pattern' }","   * autodoc.parsePair('foo //')             // => null","   * autodoc.parsePair('foo // \"http://example.com\"') // => { left: 'foo', right: '\"http://example.com\"'}","   */","  Autodoc.prototype.parsePair = function(line) {","    var parts = this.splitAtComment(line);","","    if (!parts || !parts[1]) {","      return null;","    }","","    // The => is only optional for single-line pairs, unless there's a custom","    // handler that matches the right-hand side.","    if (!parts[0] && !/^\\s*=>/.test(parts[1])) {","      if (!Lazy(this.exampleHandlers).any(function(handler) {","        return handler.pattern.test(parts[1]);","      })) return null;","    } else {","      parts[1] = parts[1].replace(/^\\s*=>\\s*/, '');","    }","","    return {","      left: parts[0],","      right: parts[1]","    };","  };","","  /**","   * Splits a line w/ a trailing '//' comment into, basically, the code part and","   * the comment part.","   *","   * @public","   * @param {string} line","   * @return {Array.<string>}","   *","   * @example","   * var autodoc = new Autodoc();","   *","   * autodoc.splitAtComment('foo // bar'); // => ['foo', 'bar']","   * autodoc.splitAtComment('foo(\"//\") // bar'); // => ['foo(\"//\")', 'bar']","   */","  Autodoc.prototype.splitAtComment = function(line) {","    // OK, here we go! We're going to read the sucker char-by-char until finding","    // two consecutive slashes ('//') that are NOT inside a string! Whee!!!","    var commentIndex = -1,","        slashCount = 0,","        stringState = null,","        index = -1;","","    while (++index < line.length) {","      if (commentIndex !== -1)","        break;","","      switch (line.charAt(index)) {","        case '/':","          if (!stringState && (++slashCount === 2))","            commentIndex = index - 1;","          break;","","        case '\"':","          if (!stringState)","            stringState = '\"';","          else if (stringState === '\"' && line.charAt(index - 1) !== '\\\\')","            stringState = null;","          break;","","        case \"'\":","          if (!stringState)","            stringState = \"'\";","          else if (stringState === \"'\" && line.charAt(index - 1) !== '\\\\')","            stringState = null;","          break;","","        default:","          slashCount = 0;","      }","    }","","    if (commentIndex === -1)","      return null;","","    return [","      trim(line.substring(0, commentIndex)),","      trim(line.substring(commentIndex + 2))","    ];","  };","","  /**","   * Produces a string representation of a type object.","   *","   * @param {Object} type","   * @returns {string}","   */","  Autodoc.formatType = function(type) {","    if (!type) { return '*'; }","","    switch (type.type) {","      case 'NameExpression':","        return type.name;","","      case 'AllLiteral':","        return '*';","","      case 'NullLiteral':","        return 'null';","","      case 'TypeApplication':","        return Autodoc.formatType(type.expression) + '.<' + Lazy(type.applications).map(Autodoc.formatType).join('|') + '>';","","      case 'RecordType':","        return '{' + Lazy(type.fields).map(function(field) {","          return field.key + ':' + Autodoc.formatType(field.value);","        }).join(', ');","","      case 'OptionalType':","        return Autodoc.formatType(type.expression) + '?';","","      case 'UnionType':","        return Lazy(type.elements).map(Autodoc.formatType).join('|');","","      case 'RestType':","        return '...' + Autodoc.formatType(type.expression);","","      case 'FunctionType':","        return 'function(' + Lazy(type.params).map(Autodoc.formatType).join(', ') + '):' + Autodoc.formatType(type.result);","","      case 'ArrayType':","        return type.elements;","","      case 'NullableType':","        return '?' + Autodoc.formatType(type.expression);","","      case 'NonNullableType':","        return '!' + Autodoc.formatType(type.expression);","","      default:","        throw 'Unable to format type ' + type.type + '!\\n\\n' + JSON.stringify(type, null, 2);","    }","  };","","  /**","   * Represents a bunch of information about a *namespace*, which is either a","   * function or an object with multiple members, forming one of the larger","   * pieces of a library.","   *","   * @typedef {Object} NamespaceInfo","   * @public","   * @property {string} namespace","   * @property {FunctionInfo} constructorMethod","   * @property {Array.<FunctionInfo>} members","   * @property {Array.<FunctionInfo>} privateMembers","   * @property {Array.<FunctionInfo>} allMembers","   * @property {boolean} hasExamples","   * @property {boolean} hasBenchmarks","   */","","  /**","   * Finds all of the functions in a library belonging to a certain namespace","   * and creates a {@link NamespaceInfo} object from each, with members sorted","   * in a UI-friendly order.","   *","   * @public","   * @param {Object.<string, Array.<FunctionInfo>>} docs","   * @param {string} namespace","   * @returns {NamespaceInfo}","   */","  Autodoc.createNamespaceInfo = function(docs, namespace) {","    // Find the corresponding constructor, if one exists.","    var constructorMethod = Lazy(docs)","      .values()","      .flatten()","      .findWhere({ name: namespace });","","    // Get all the members that are part of the specified namespace, excluding","    // the constructor (if applicable), and sort them alphabetically w/ so-called","    // \"static\" members coming first.","    var members = Lazy(docs[namespace])","      .reject(function(doc) {","        return doc.name === namespace;","      })","      .sortBy(function(doc) {","        // Talk about hacky...","        // This is how I've decided to put static methods first.","        return (doc.isStatic ? 'a' : 'b') + doc.shortName;","      })","      .toArray();","","    // For templating purposes, it will also be useful to have a collection","    // comprising ALL members, in this order:","    //","    // 1. constructor","    // 2. static methods","    // 3. instance methods","    var allMembers = Lazy([constructorMethod])","      .concat(members)","      .compact()","      .toArray();","","    // Private members can be elevated to some visible scope when running tests.","    var privateMembers = Lazy(allMembers)","      .filter('isPrivate')","      .sortBy('name')","      .toArray();","","    // Decorate these docs w/ a meaningful \"type\" (this is more useful than just","    // a boolean flag, and it's easier to do here than in the template).","    Lazy(allMembers).each(function(member) {","      member.sectionType = member.isConstructor ? 'constructor' : 'method';","    });","","    return {","      namespace: namespace,","      constructorMethod: constructorMethod,","      members: members,","      privateMembers: privateMembers,","      allMembers: allMembers,","      hasExamples: Lazy(allMembers).any('hasExamples'),","      hasBenchmarks: Lazy(allMembers).any('hasBenchmarks'),","      excludeFromDocs: (namespace === '[private]') || Lazy(allMembers).all('excludeFromDocs')","    };","  };","","  /**","   * Replaces JsDoc references like '{@link MyClass}' with actual HTML links.","   *","   * @param {string} html","   * @returns {string} The HTML with JsDoc `@link` references replaced by links.","   *","   * @examples","   * Autodoc.processInternalLinks('{@link MyClass}') // => '<a href=\"#MyClass\">MyClass</a>'","   */","  Autodoc.processInternalLinks = function(html) {","    return html.replace(/\\{@link ([^\\}]*)}/g, function(string, match) {","      return '<a href=\"#' + match.replace(/[\\.#]/g, '-') + '\">' + match + '</a>';","    });","  };","","  /**","   * Checks whether an AST node is a line like:","   *","   *     module.exports = Foo;","   *","   * @param {Object} node The AST node to check.","   * @returns {string=} If `node` assigns some identifier to `module.exports`,","   *     then the name of that identifier. Otherwise `null`.","   */","  Autodoc.getModuleExportsIdentifier = function(node) {","    node = node.unwrap();","","    if (node.type !== 'AssignmentExpression') {","      return null;","    }","","    if (node.left.type !== 'MemberExpression') {","      return null;","    }","","    var object     = node.left.object,","        property   = node.left.property,","        identifier = node.right;","","    if (!Lazy([object, property, identifier]).all({ type: 'Identifier' })) {","      return null;","    }","","    if (object.name !== 'module' || property.name !== 'exports') {","      return null;","    }","","    return identifier.name;","  };","","  /**","   * Given an AST node representing some function and the associated library","   * code, returns just the code for the function.","   *","   * @param {Object} node The AST node.","   * @param {string} code The source code for the associated library.","   * @return {string} Just the source code for the function itself.","   */","  Autodoc.getFunctionSource = function(node, code) {","    var substring = String.prototype.substring.apply(code, node.range);","    return unindent(substring);","  };","","  /**","   * Provides an escaped form of a string to facilitate dropping it \"unescaped\"","   * (aside from this, of course) directly into a JS template. Basically,","   * escapes single quotes, double quotes, newlines, and backslashes.","   *","   * @public","   * @param {string} string","   * @returns {string}","   *","   * @examples","   * Autodoc.escapeJsString('foo')                      // => 'foo'","   * Autodoc.escapeJsString(\"Hell's Kitchen\")           // => \"Hell\\\\'s Kitchen\"","   * Autodoc.escapeJsString('Dan \"The Man\"')            // => 'Dan \\\\\"The Man\\\\\"'","   * Autodoc.escapeJsString('line 1\\nline 2')           // => 'line 1\\\\nline 2'","   * Autodoc.escapeJsString('foo\\\\bar')                 // => 'foo\\\\\\\\bar'","   * Autodoc.escapeJsString('dir\\\\\"other dir\"\\\\Moe\\'s') // => 'dir\\\\\\\\\\\\\"other dir\\\\\"\\\\\\\\Moe\\\\\\'s'","   */","  Autodoc.escapeJsString = function(string) {","    return string.replace(/\\\\/g, '\\\\\\\\')","      .replace(/'/g, \"\\\\'\")","      .replace(/\"/g, '\\\\\"')","      .replace(/\\n/g, '\\\\n');","  };","","  /**","   * Removes leading and trailing whitespace from a string.","   *","   * @private","   * @param {string} string The string to trim.","   * @returns {string} The trimmed result.","   *","   * @examples","   * trim('foo')                 // => 'foo'","   * trim('  foo')               // => 'foo'","   * trim('foo  ')               // => 'foo'","   * trim('  foo  ')             // => 'foo'","   * trim(' \\t\\n\\r foo \\r\\n\\t ') // => 'foo'","   *","   * @benchmarks","   * trim('foo')        // no trimming necessary","   * trim('   foo    ') // trimming necessary","   */","  function trim(string) {","    return string.replace(/^\\s+/, '').replace(/\\s+$/, '');","  }","","  /**","   * Splits apart a camelCased string.","   *","   * @private","   * @param {string} string The string to split.","   * @returns {Array.<string>} An array containing the parts of the string.","   *","   * @examples","   * splitCamelCase('fooBarBaz');      // => ['foo', 'bar', 'baz']","   * splitCamelCase('Foo123Bar');      // => ['foo123', 'bar']","   * splitCamelCase('XMLHttpRequest'); // => ['xml', 'http', 'request']","   */","  function splitCamelCase(string) {","    var matcher  = /[^A-Z]([A-Z])|([A-Z])[^A-Z]/g,","        tokens   = [],","        position = 0,","        index, match;","","    string || (string = '');","","    while (match = matcher.exec(string)) {","      index = typeof match[1] === 'string' ? match.index + 1 : match.index;","      if (position === index) { continue; }","      tokens.push(string.substring(position, index).toLowerCase());","      position = index;","    }","    ","    if (position < string.length) {","      tokens.push(string.substring(position).toLowerCase());","    }","","    return tokens;","  }","","  /**","   * Converts a string like 'fooBar' to 'foo-bar'.","   *","   * @private","   * @param {string} string The string to convert.","   * @returns {string} The same string, but hyphenated rather than camelCased.","   *","   * @examples","   * hyphenate('fooBarBaz');      // => 'foo-bar-baz'","   * hyphenate('Foo123Bar');      // => 'foo123-bar'","   * hyphenate('XMLHttpRequest'); // => 'xml-http-request'","   */","  function hyphenate(string) {","    return splitCamelCase(string).join('-');","  }","","  /**","   * Converts a camelCased string to an acronym.","   *","   * @private","   * @param {string} string The string to convert.","   * @returns {string} An acronym (lower-case) comprising the first letter from","   *     each part of the string.","   *","   * @examples","   * acronym('fooBarBaz');      // => 'fbb'","   * acronym('foo123Bar');      // => 'fb'","   * acronym('XMLHttpRequest'); // => 'xhr'","   */","  function acronym(string) {","    return splitCamelCase(string).map(","      function(str) { return str.charAt(0); }).join('');","  }","","  /**","   * Splits a string into two parts on either side of a specified divider.","   *","   * @private","   * @param {string} string The string to divide into two parts.","   * @param {string} divider The string used as the pivot point.","   * @returns {Array.<string>} The parts of the string before and after the","   *     first occurrence of `divider`, or a 1-element array containing `string`","   *     if `divider` wasn't found.","   *","   * @examples","   * divide('hello', 'll')   // => ['he', 'o']","   * divide('banana', 'n')   // => ['ba', 'ana']","   * divide('a->b->c', '->') // => ['a', 'b->c']","   * divide('foo', 'xyz')    // => ['foo']","   * divide('abc', 'abc')    // => ['', '']","   */","  function divide(string, divider) {","    var seam = string.indexOf(divider);","    if (seam === -1) {","      return [string];","    }","","    return [string.substring(0, seam), string.substring(seam + divider.length)];","  };","","  /**","   * Unindents a multiline string based on the indentation level of the least-","   * indented line.","   *","   * @private","   * @param {string} string The string to unindent.","   * @param {boolean} skipFirstLine Whether or not to skip the first line for","   *     the purpose of determining proper indentation (defaults to `true`).","   * @returns {string} A new string that has effectively been unindented.","   *","   * @examples","   * unindent('foo\\n  bar\\n  baz');   // => 'foo\\nbar\\nbaz'","   * unindent('foo\\n  bar\\n    baz'); // => 'foo\\nbar\\n  baz'","   * unindent('foo\\n\\n  bar\\n  baz'); // => 'foo\\n\\nbar\\nbaz'","   * unindent('foo\\n\\n  bar\\n baz');  // => 'foo\\n\\n bar\\nbaz'","   */","  function unindent(string, skipFirstLine) {","    var lines     = string.split('\\n'),","        skipFirst = typeof skipFirstLine !== 'undefined' ? skipFirstLine : true,","        start     = skipFirst ? 1 : 0;","","    var indentation, smallestIndentation = Infinity;","    for (var i = start, len = lines.length; i < len; ++i) {","      if (isBlank(lines[i])) {","        continue;","      }","","      indentation = getIndentation(lines[i]);","      if (indentation < smallestIndentation) {","        smallestIndentation = indentation;","      }","    }","","    var result = [lines[0]]","      .concat(","        lines","          .slice(1)","          .map(function(line) { return decreaseIndent(line, smallestIndentation); })","      )","      .join('\\n');","","    return result;","  }","","  /**","   * Determines how much a line is indented.","   *","   * @private","   * @param {string} line The line to look at.","   * @returns {number} The number of spaces the line is indented.","   *","   * @examples","   * getIndentation('');      // => 0","   * getIndentation('  bar'); // => 2","   */","  function getIndentation(line) {","    return line.match(/^(\\s*)/)[1].length;","  }","","  /**","   * Decreases the indentation of a line.","   *","   * @private","   * @param {string} line The line whose indentation you want to decrease.","   * @param {number} amount The number of spaces the given line's indentation","   *     should be decreased.","   * @returns {string} A new string with less indentation than the given one.","   *","   * @examples","   * decreaseIndent('  foo', 2);   // => 'foo'","   * decreaseIndent('    foo', 2); // => '  foo'","   * decreaseIndent('', 2);        // => ''","   */","  function decreaseIndent(line, amount) {","    return line.substring(amount);","  }","","  /**","   * Determines if a string is empty or consists only of whitespace.","   *","   * @private","   * @param {string} string The string to check for blankness.","   * @returns {boolean} Whether or not the string is blank.","   *","   * @examples","   * isBlank('');             // => true","   * isBlank('foo');          // => false","   * isBlank('   ');          // => true","   * isBlank(' \\n');          // => true","   * isBlank(' \\t');          // => true","   * isBlank(' \\r');          // => true","   * isBlank('foo\\n  \\nbar'); // => false","   */","  function isBlank(string) {","    return (/^\\s*$/).test(string);","  }","","  /**","   * Determines if a string looks like a JavaScript comment.","   *","   * @private","   * @param {string} string The string to check.","   * @returns {boolean} Whether or not the string looks like a JavaScript comment.","   *","   * @examples","   * looksLikeComment('');             // => false","   * looksLikeComment('foo');          // => false","   * looksLikeComment('// foo');       // => true","   * looksLikeComment('  // foo');     // => true","   * looksLikeComment('foo // bar');   // => false","   */","  function looksLikeComment(string) {","    return (/^\\s*\\/\\//).test(string);","  }","","  /**","   * Takes the first line of a string and, if there's more, appends '...' to","   * indicate as much.","   *","   * @private","   * @param {string} string The string whose first line you want to get.","   * @returns {string} The first line of the string.","   *","   * @examples","   * firstLine('foo');      // => 'foo'","   * firstLine('foo\\nbar'); // => 'foo (...)'","   */","  function firstLine(string) {","    var lineBreak = string.indexOf('\\n');","","    if (lineBreak === -1) {","      return string;","    }","","    return string.substring(0, lineBreak) + ' (...)';","  }","","  /**","   * Prepends each line in a block of text w/ line numbers, optionally","   * highlighting a specific line.","   */","  function withLineNumbers(text, offset, offendingLine) {","    if (typeof offendingLine !== 'number') {","      offendingLine = NaN;","    }","","    var lines = text;","    if (typeof lines === 'string') {","      lines = lines.split('\\n');","    }","","    return lines.map(function(line, i) {","      line = (i + offset) + ': ' + line;","      if (i === (offendingLine - 1)) {","        line = '\\x1B[31m' + line + '\\x1B[39m';","      } else {","        line = '\\x1B[90m' + line + '\\x1B[39m';","      }","      return line;","    }).join('\\n');","  }","","  /**","   * Yes, removes the leading 'var' from a line. Leave me alone.","   *","   * @private","   * @param {string} string With leading var.","   * @returns {string} Without leading var.","   *","   * @examples","   * removeVar('var foo = 5');  // => '5'","   * removeVar('foo = \"var x\"') // => 'foo = \"var x\"'","   * removeVar('var _foo = 8'); // => '8'","   * removeVar('var $foo = 8'); // => '8'","   * removeVar('var a, b = 5'); // => 'var a, b = 5'","   */","  function removeVar(string) {","    return string.replace(/^\\s*var\\s*[\\w\\$]+\\s*=\\s*/, '');","  }","","  /**","   * Extracts the variable name declared with 'var' from a line, if present.","   * TODO: Parse the line instead of doing this regex crap.","   *","   * @private","   * @param {string} string With leading var.","   * @returns {?string} Variable name, or null.","   *","   * @examples","   * extractVar('var foo = 5');  // => 'foo'","   * extractVar('foo = \"var x\"') // => null","   * extractVar('var _foo = 8'); // => '_foo'","   * extractVar('var $foo = 8'); // => '$foo'","   * extractVar('var a, b = 5'); // => null","   */","  function extractVar(string) {","    var name = string.match(/^\\s*var\\s*([\\w\\$]+)\\s*=\\s*/);","    return name ? name[1] : null;","  }","","  /**","   * Checks if a string starts with a given prefix.","   *","   * @private","   * @param {string} string","   * @param {string} prefix","   * @returns {boolean}","   *","   * @examples","   * startsWith('foo', 'f');    // => true","   * startsWith('foo', 'foo');  // => true","   * startsWith('foo', 'fool'); // => false","   * startsWith('foo', 'oo');   // => false","   */","  function startsWith(string, prefix) {","    return string.lastIndexOf(prefix, 0) === 0;","  }","","  /**","   * Takes either a `{ parse }` object or an actual function and wraps it as a","   * `{ parse }` object with an optional post-processing step.","   */","  function wrapParser(parser, postprocess) {","    if (!parser) {","      return null;","    }","","    postprocess = postprocess || Lazy.identity;","","    var parseMethod = typeof parser === 'function' ?","      parser :","      parser.parse;","","    return {","      parse: function() {","        return postprocess(parseMethod.apply(parser, arguments));","      }","    };","  }","","  /**","   * Updates the HTML representing a function's signature by replacing the '...'","   * with a link to the full source.","   */","  function insertSignatureLink(html, identifier) {","    return html.replace('/*...*/', '<a class=\"reveal-source\" href=\"#source-' + identifier + '\">/*...*/</a>');","  }","","  /**","   * The default handlers defined for examples.","   */","  function exampleHandlers(customHandlers) {","    return (customHandlers || []).concat([","      {","        pattern: /^(\\w[\\w\\.\\(\\)\\[\\]'\"]*)\\s*===?\\s*(.*)$/,","        template: 'equality',","        data: function(match) {","          return {","            left: match[1],","            right: match[2]","          };","        }","      },","      {","        pattern: /^(\\w[\\w\\.\\(\\)\\[\\]'\"]*)\\s*!==?\\s*(.*)$/,","        template: 'inequality',","        data: function(match) {","          return {","            left: match[1],","            right: match[2]","          };","        }","      },","      {","        pattern: /^instanceof (.*)$/,","        template: 'instanceof',","        data: function(match) {","          return { type: match[1] };","        }","      },","      {","        pattern: /^NaN$/,","        template: 'nan'","      },","      {","        pattern: /^throws$/,","        template: 'throws'","      },","      {","        pattern: /^calls\\s+(\\w+)\\s+(\\d+)(?:\\s+times?)?$/,","        template: 'calls',","        data: function(match) {","          return {","            callback: match[1],","            count: getCount(match[2])","          };","        }","      },","      {","        pattern: /^calls\\s+(\\w+)\\s+(\\d+)\\s+times? asynchronously$/,","        template: 'calls_async',","        data: function(match) {","          return {","            callback: match[1],","            count: getCount(match[2])","          };","        }","      },","      {","        pattern: /^=~\\s+\\/(.*)\\/$/,","        template: 'string_proximity',","        data: function(match) {","          return { pattern: match[1] };","        }","      },","      {","        pattern: /^=~\\s+\\[(.*),?\\s*\\.\\.\\.\\s*\\]$/,","        template: 'array_inclusion',","        data: function(match) {","          return { elements: match[1] };","        }","      },","      {","        pattern: /^one of (.*)$/,","        template: 'array_membership',","        data: function(match) {","          return { values: match[1] };","        }","      },","      {","        pattern: /^=~\\s+\\[(.*)\\]$/,","        template: 'array_proximity',","        data: function(match) {","          return { elements: match[1] };","        }","      },","      {","        pattern: /^\\[(.*),?\\s*\\.\\.\\.\\s*\\]$/,","        template: 'array_head',","        data: function(match) {","          return { head: match[1] };","        }","      },","      {","        pattern: /^\\[\\s*\\.\\.\\.,?\\s*(.*)\\]$/,","        template: 'array_tail',","        data: function(match) {","          return { tail: match[1] };","        }","      },","      {","        pattern: /\\{([\\s\\S]*),?[\\s\\n]*\\.\\.\\.[\\s\\n]*\\}/,","        template: 'object_proximity',","        data: function(match) {","          return { properties: match[1] };","        }","      }","    ]);","  }","","  /**","   * Very simple word-to-number converter.","   *","   * @private","   * @examples","   * getCount('one');   // => 1","   * getCount('once');  // => 1","   * getCount('twice'); // => 2","   */","  function getCount(word) {","    switch (word.toLowerCase()) {","      case 'one':","      case 'once':","        return 1;","","      case 'two':","      case 'twice':","        return 2;","","      case 'three':","      case 'thrice':","        return 3;","","      case 'four':","        return 4;","","      case 'five':","        return 5;","","      case 'six':","        return 6;","","      case 'seven':","        return 7;","","      case 'eight':","        return 8;","","      case 'nine':","        return 9;","","      case 'ten':","        return 10;","    }","","    return word;","  }","","  if (typeof module !== 'undefined' && module.exports) {","    module.exports = Autodoc;","","  } else {","    context.Autodoc = Autodoc;","  }","","}(typeof global !== 'undefined' ? global : this));",""],"l":{"7":1,"9":1,"13":1,"14":1,"16":1,"17":1,"64":1,"65":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"86":0,"87":0,"91":1,"96":1,"133":1,"134":0,"147":1,"148":0,"159":1,"160":0,"167":0,"170":0,"178":0,"183":0,"185":0,"187":0,"188":0,"193":0,"196":0,"197":0,"198":0,"203":0,"204":0,"205":0,"209":0,"211":0,"218":0,"220":0,"223":0,"224":0,"225":0,"228":0,"229":0,"232":0,"240":0,"241":0,"242":0,"248":0,"249":0,"250":0,"251":0,"254":0,"255":0,"261":0,"263":0,"269":0,"270":0,"273":0,"275":0,"279":0,"283":0,"287":0,"288":0,"300":0,"305":0,"309":0,"310":0,"312":0,"315":0,"322":0,"324":0,"327":0,"328":0,"329":0,"332":0,"341":0,"364":1,"365":0,"371":0,"374":0,"378":0,"379":0,"380":0,"382":0,"383":0,"385":0,"389":0,"392":0,"394":0,"401":0,"407":0,"417":1,"418":0,"420":0,"421":0,"433":1,"443":0,"444":0,"445":0,"448":0,"452":0,"454":0,"458":0,"459":0,"462":0,"463":0,"464":0,"465":0,"468":0,"470":0,"471":0,"476":0,"477":0,"481":0,"487":0,"491":0,"495":0,"499":0,"500":0,"506":0,"514":0,"515":0,"518":0,"519":0,"522":0,"524":0,"527":0,"528":0,"530":0,"533":0,"536":0,"539":0,"549":0,"589":1,"590":0,"606":0,"607":0,"610":0,"658":1,"659":0,"661":0,"664":0,"686":1,"687":0,"689":0,"690":0,"693":0,"706":1,"707":0,"709":0,"710":0,"713":0,"741":1,"742":0,"744":0,"747":0,"749":0,"775":1,"776":0,"778":0,"780":0,"785":0,"787":0,"791":0,"795":0,"796":0,"798":0,"799":0,"800":0,"803":0,"804":0,"805":0,"806":0,"809":0,"812":0,"824":1,"825":0,"832":0,"834":0,"835":0,"838":0,"844":0,"881":1,"882":0,"885":0,"886":0,"897":0,"902":0,"960":1,"961":0,"965":0,"966":0,"968":0,"970":0,"979":0,"987":0,"1000":1,"1001":0,"1003":0,"1004":0,"1009":0,"1012":0,"1017":0,"1023":0,"1030":1,"1031":0,"1033":0,"1036":0,"1044":1,"1045":0,"1079":1,"1080":0,"1094":0,"1096":0,"1099":0,"1100":0,"1101":0,"1106":0,"1107":0,"1108":0,"1113":0,"1130":1,"1131":0,"1141":1,"1142":0,"1145":0,"1146":0,"1148":0,"1151":0,"1181":1,"1182":0,"1186":0,"1187":0,"1194":0,"1196":0,"1197":0,"1198":0,"1199":0,"1202":0,"1204":0,"1205":0,"1207":0,"1208":0,"1213":0,"1217":0,"1218":0,"1219":0,"1220":0,"1222":0,"1223":0,"1226":0,"1229":0,"1232":0,"1234":0,"1235":0,"1237":0,"1242":0,"1243":0,"1244":0,"1246":0,"1248":0,"1252":0,"1260":0,"1270":1,"1271":0,"1272":0,"1275":0,"1277":0,"1289":1,"1290":0,"1321":1,"1322":0,"1324":0,"1325":0,"1330":0,"1331":0,"1332":0,"1333":0,"1335":0,"1338":0,"1358":1,"1361":0,"1366":0,"1367":0,"1368":0,"1370":0,"1372":0,"1373":0,"1374":0,"1377":0,"1378":0,"1379":0,"1380":0,"1381":0,"1384":0,"1385":0,"1386":0,"1387":0,"1388":0,"1391":0,"1395":0,"1396":0,"1398":0,"1410":1,"1411":0,"1413":0,"1415":0,"1418":0,"1421":0,"1424":0,"1427":0,"1428":0,"1432":0,"1435":0,"1438":0,"1441":0,"1444":0,"1447":0,"1450":0,"1453":0,"1483":1,"1485":0,"1493":0,"1495":0,"1500":0,"1510":0,"1516":0,"1523":0,"1524":0,"1527":0,"1548":1,"1549":0,"1550":0,"1563":1,"1564":0,"1566":0,"1567":0,"1570":0,"1571":0,"1574":0,"1578":0,"1579":0,"1582":0,"1583":0,"1586":0,"1597":1,"1598":0,"1599":0,"1619":1,"1620":0,"1644":1,"1645":0,"1660":1,"1661":0,"1666":0,"1668":0,"1669":0,"1670":0,"1671":0,"1672":0,"1675":0,"1676":0,"1679":0,"1694":1,"1695":0,"1711":1,"1712":0,"1713":0,"1733":1,"1734":0,"1735":0,"1736":0,"1739":0,"1758":1,"1759":0,"1763":0,"1764":0,"1765":0,"1766":0,"1769":0,"1770":0,"1771":0,"1775":0,"1779":0,"1783":0,"1797":1,"1798":0,"1815":1,"1816":0,"1835":1,"1836":0,"1853":1,"1854":0,"1869":1,"1870":0,"1872":0,"1873":0,"1876":0,"1883":1,"1884":0,"1885":0,"1888":0,"1889":0,"1890":0,"1893":0,"1894":0,"1895":0,"1896":0,"1898":0,"1900":0,"1918":1,"1919":0,"1937":1,"1938":0,"1939":0,"1956":1,"1957":0,"1964":1,"1965":0,"1966":0,"1969":0,"1971":0,"1975":0,"1977":0,"1986":1,"1987":0,"1993":1,"1994":0,"1999":0,"2009":0,"2019":0,"2034":0,"2044":0,"2054":0,"2061":0,"2068":0,"2075":0,"2082":0,"2089":0,"2096":0,"2111":1,"2112":0,"2115":0,"2119":0,"2123":0,"2126":0,"2129":0,"2132":0,"2135":0,"2138":0,"2141":0,"2144":0,"2147":0,"2150":1,"2151":1,"2154":0}},"/home/travis/build/npmtest/node-npmtest-autodoc/node_modules/autodoc/resources/javascripts/utils.js":{"path":"/home/travis/build/npmtest/node-npmtest-autodoc/node_modules/autodoc/resources/javascripts/utils.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":9,"loc":{"start":{"line":9,"column":20},"end":{"line":9,"column":37}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":16},"end":{"line":44,"column":38}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":27,"column":2}},"2":{"start":{"line":10,"column":2},"end":{"line":14,"column":20}},"3":{"start":{"line":16,"column":2},"end":{"line":20,"column":3}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":65}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":34}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":23}},"7":{"start":{"line":22,"column":2},"end":{"line":24,"column":3}},"8":{"start":{"line":23,"column":4},"end":{"line":23,"column":53}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":52}},"10":{"start":{"line":44,"column":0},"end":{"line":49,"column":2}},"11":{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},"12":{"start":{"line":46,"column":4},"end":{"line":46,"column":15}},"13":{"start":{"line":48,"column":2},"end":{"line":48,"column":13}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]}},"code":["/**"," * Formats a number by adding commas as the thousands separator and truncating"," * decimal part to 3 places (arbitrary decision on my part)."," *"," * @global"," * @param {number} number"," * @returns {string}"," */","this.formatNumber = function(number) {","  var wholeAndDecimal = String(number.toFixed(3)).split('.'),","      whole           = wholeAndDecimal[0],","      parts           = [],","      separatorCurr   = whole.length - 3,","      separatorPrev;","","  while (separatorCurr > 0) {","    parts.unshift(whole.substring(separatorCurr, separatorPrev));","    separatorPrev = separatorCurr;","    separatorCurr -= 3;","  }","","  if (separatorCurr <= 0) {","    parts.unshift(whole.substring(0, separatorPrev));","  }","","  return parts.join(',') + '.' + wholeAndDecimal[1];","};","","/**"," * Appends a bunch of whitespace to the end of a string to get it to a desired"," * length. Has no effect if the string exceeds the specified length to begin"," * with."," *"," * @global"," * @param {string} str The string to pad."," * @param {number} length The desired length of the string."," * @returns {string} The string with its fresh new white padding."," *"," * @examples"," * padRight('foo', 5) // => 'foo  '"," * padRight('', 5)    // => '     '"," * padRight('foo', 2) // => 'foo'"," */","this.padRight = function(str, length) {","  while (str.length < length) {","    str += ' ';","  }","  return str;","};",""],"l":{"9":1,"10":0,"16":0,"17":0,"18":0,"19":0,"22":0,"23":0,"26":0,"44":1,"45":0,"46":0,"48":0}}}